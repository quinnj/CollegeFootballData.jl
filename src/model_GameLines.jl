# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct GameLines <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    week::Any # spec type: Union{ Nothing, Int32 } # spec name: week
    seasonType::Any # spec type: Union{ Nothing, String } # spec name: seasonType
    homeTeam::Any # spec type: Union{ Nothing, String } # spec name: homeTeam
    homeConference::Any # spec type: Union{ Nothing, String } # spec name: homeConference
    homeScore::Any # spec type: Union{ Nothing, Int32 } # spec name: homeScore
    awayTeam::Any # spec type: Union{ Nothing, String } # spec name: awayTeam
    awayConference::Any # spec type: Union{ Nothing, String } # spec name: awayConference
    awayScore::Any # spec type: Union{ Nothing, Int32 } # spec name: awayScore
    lines::Any # spec type: Union{ Nothing, Vector{GameLinesLines} } # spec name: lines

    function GameLines(;id=nothing, season=nothing, week=nothing, seasonType=nothing, homeTeam=nothing, homeConference=nothing, homeScore=nothing, awayTeam=nothing, awayConference=nothing, awayScore=nothing, lines=nothing)
        o = new()
        validate_property(GameLines, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(GameLines, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(GameLines, Symbol("week"), week)
        setfield!(o, Symbol("week"), week)
        validate_property(GameLines, Symbol("seasonType"), seasonType)
        setfield!(o, Symbol("seasonType"), seasonType)
        validate_property(GameLines, Symbol("homeTeam"), homeTeam)
        setfield!(o, Symbol("homeTeam"), homeTeam)
        validate_property(GameLines, Symbol("homeConference"), homeConference)
        setfield!(o, Symbol("homeConference"), homeConference)
        validate_property(GameLines, Symbol("homeScore"), homeScore)
        setfield!(o, Symbol("homeScore"), homeScore)
        validate_property(GameLines, Symbol("awayTeam"), awayTeam)
        setfield!(o, Symbol("awayTeam"), awayTeam)
        validate_property(GameLines, Symbol("awayConference"), awayConference)
        setfield!(o, Symbol("awayConference"), awayConference)
        validate_property(GameLines, Symbol("awayScore"), awayScore)
        setfield!(o, Symbol("awayScore"), awayScore)
        validate_property(GameLines, Symbol("lines"), lines)
        setfield!(o, Symbol("lines"), lines)
        o
    end
end # type GameLines

const _property_map_GameLines = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("season")=>Symbol("season"), Symbol("week")=>Symbol("week"), Symbol("seasonType")=>Symbol("seasonType"), Symbol("homeTeam")=>Symbol("homeTeam"), Symbol("homeConference")=>Symbol("homeConference"), Symbol("homeScore")=>Symbol("homeScore"), Symbol("awayTeam")=>Symbol("awayTeam"), Symbol("awayConference")=>Symbol("awayConference"), Symbol("awayScore")=>Symbol("awayScore"), Symbol("lines")=>Symbol("lines"))
const _property_types_GameLines = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("season")=>"Int32", Symbol("week")=>"Int32", Symbol("seasonType")=>"String", Symbol("homeTeam")=>"String", Symbol("homeConference")=>"String", Symbol("homeScore")=>"Int32", Symbol("awayTeam")=>"String", Symbol("awayConference")=>"String", Symbol("awayScore")=>"Int32", Symbol("lines")=>"Vector{GameLinesLines}")
Base.propertynames(::Type{ GameLines }) = collect(keys(_property_map_GameLines))
Swagger.property_type(::Type{ GameLines }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GameLines[name]))}
Swagger.field_name(::Type{ GameLines }, property_name::Symbol) =  _property_map_GameLines[property_name]

function check_required(o::GameLines)
    true
end

function validate_property(::Type{ GameLines }, name::Symbol, val)
end
