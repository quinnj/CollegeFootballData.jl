# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayerGameTypes <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    athletes::Any # spec type: Union{ Nothing, Vector{PlayerGameAthletes} } # spec name: athletes

    function PlayerGameTypes(;name=nothing, athletes=nothing)
        o = new()
        validate_property(PlayerGameTypes, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(PlayerGameTypes, Symbol("athletes"), athletes)
        setfield!(o, Symbol("athletes"), athletes)
        o
    end
end # type PlayerGameTypes

const _property_map_PlayerGameTypes = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("athletes")=>Symbol("athletes"))
const _property_types_PlayerGameTypes = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("athletes")=>"Vector{PlayerGameAthletes}")
Base.propertynames(::Type{ PlayerGameTypes }) = collect(keys(_property_map_PlayerGameTypes))
Swagger.property_type(::Type{ PlayerGameTypes }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayerGameTypes[name]))}
Swagger.field_name(::Type{ PlayerGameTypes }, property_name::Symbol) =  _property_map_PlayerGameTypes[property_name]

function check_required(o::PlayerGameTypes)
    true
end

function validate_property(::Type{ PlayerGameTypes }, name::Symbol, val)
end
