# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Play <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    drive_id::Any # spec type: Union{ Nothing, Int32 } # spec name: drive_id
    game_id::Any # spec type: Union{ Nothing, Int32 } # spec name: game_id
    drive_number::Any # spec type: Union{ Nothing, Int32 } # spec name: drive_number
    play_number::Any # spec type: Union{ Nothing, Int32 } # spec name: play_number
    offense::Any # spec type: Union{ Nothing, String } # spec name: offense
    offense_conference::Any # spec type: Union{ Nothing, String } # spec name: offense_conference
    offense_score::Any # spec type: Union{ Nothing, Int32 } # spec name: offense_score
    defense::Any # spec type: Union{ Nothing, String } # spec name: defense
    home::Any # spec type: Union{ Nothing, String } # spec name: home
    away::Any # spec type: Union{ Nothing, String } # spec name: away
    defense_conference::Any # spec type: Union{ Nothing, String } # spec name: defense_conference
    defense_score::Any # spec type: Union{ Nothing, Int32 } # spec name: defense_score
    period::Any # spec type: Union{ Nothing, Int32 } # spec name: period
    clock::Any # spec type: Union{ Nothing, DriveStartTime } # spec name: clock
    offense_timeouts::Any # spec type: Union{ Nothing, Int32 } # spec name: offense_timeouts
    defense_timeouts::Any # spec type: Union{ Nothing, Int32 } # spec name: defense_timeouts
    yard_line::Any # spec type: Union{ Nothing, Int32 } # spec name: yard_line
    yards_to_goal::Any # spec type: Union{ Nothing, Int32 } # spec name: yards_to_goal
    down::Any # spec type: Union{ Nothing, Int32 } # spec name: down
    distance::Any # spec type: Union{ Nothing, Int32 } # spec name: distance
    yards_gained::Any # spec type: Union{ Nothing, Int32 } # spec name: yards_gained
    scoring::Any # spec type: Union{ Nothing, Bool } # spec name: scoring
    play_type::Any # spec type: Union{ Nothing, String } # spec name: play_type
    play_text::Any # spec type: Union{ Nothing, String } # spec name: play_text
    ppa::Any # spec type: Union{ Nothing, Float32 } # spec name: ppa

    function Play(;id=nothing, drive_id=nothing, game_id=nothing, drive_number=nothing, play_number=nothing, offense=nothing, offense_conference=nothing, offense_score=nothing, defense=nothing, home=nothing, away=nothing, defense_conference=nothing, defense_score=nothing, period=nothing, clock=nothing, offense_timeouts=nothing, defense_timeouts=nothing, yard_line=nothing, yards_to_goal=nothing, down=nothing, distance=nothing, yards_gained=nothing, scoring=nothing, play_type=nothing, play_text=nothing, ppa=nothing)
        o = new()
        validate_property(Play, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Play, Symbol("drive_id"), drive_id)
        setfield!(o, Symbol("drive_id"), drive_id)
        validate_property(Play, Symbol("game_id"), game_id)
        setfield!(o, Symbol("game_id"), game_id)
        validate_property(Play, Symbol("drive_number"), drive_number)
        setfield!(o, Symbol("drive_number"), drive_number)
        validate_property(Play, Symbol("play_number"), play_number)
        setfield!(o, Symbol("play_number"), play_number)
        validate_property(Play, Symbol("offense"), offense)
        setfield!(o, Symbol("offense"), offense)
        validate_property(Play, Symbol("offense_conference"), offense_conference)
        setfield!(o, Symbol("offense_conference"), offense_conference)
        validate_property(Play, Symbol("offense_score"), offense_score)
        setfield!(o, Symbol("offense_score"), offense_score)
        validate_property(Play, Symbol("defense"), defense)
        setfield!(o, Symbol("defense"), defense)
        validate_property(Play, Symbol("home"), home)
        setfield!(o, Symbol("home"), home)
        validate_property(Play, Symbol("away"), away)
        setfield!(o, Symbol("away"), away)
        validate_property(Play, Symbol("defense_conference"), defense_conference)
        setfield!(o, Symbol("defense_conference"), defense_conference)
        validate_property(Play, Symbol("defense_score"), defense_score)
        setfield!(o, Symbol("defense_score"), defense_score)
        validate_property(Play, Symbol("period"), period)
        setfield!(o, Symbol("period"), period)
        validate_property(Play, Symbol("clock"), clock)
        setfield!(o, Symbol("clock"), clock)
        validate_property(Play, Symbol("offense_timeouts"), offense_timeouts)
        setfield!(o, Symbol("offense_timeouts"), offense_timeouts)
        validate_property(Play, Symbol("defense_timeouts"), defense_timeouts)
        setfield!(o, Symbol("defense_timeouts"), defense_timeouts)
        validate_property(Play, Symbol("yard_line"), yard_line)
        setfield!(o, Symbol("yard_line"), yard_line)
        validate_property(Play, Symbol("yards_to_goal"), yards_to_goal)
        setfield!(o, Symbol("yards_to_goal"), yards_to_goal)
        validate_property(Play, Symbol("down"), down)
        setfield!(o, Symbol("down"), down)
        validate_property(Play, Symbol("distance"), distance)
        setfield!(o, Symbol("distance"), distance)
        validate_property(Play, Symbol("yards_gained"), yards_gained)
        setfield!(o, Symbol("yards_gained"), yards_gained)
        validate_property(Play, Symbol("scoring"), scoring)
        setfield!(o, Symbol("scoring"), scoring)
        validate_property(Play, Symbol("play_type"), play_type)
        setfield!(o, Symbol("play_type"), play_type)
        validate_property(Play, Symbol("play_text"), play_text)
        setfield!(o, Symbol("play_text"), play_text)
        validate_property(Play, Symbol("ppa"), ppa)
        setfield!(o, Symbol("ppa"), ppa)
        o
    end
end # type Play

const _property_map_Play = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("drive_id")=>Symbol("drive_id"), Symbol("game_id")=>Symbol("game_id"), Symbol("drive_number")=>Symbol("drive_number"), Symbol("play_number")=>Symbol("play_number"), Symbol("offense")=>Symbol("offense"), Symbol("offense_conference")=>Symbol("offense_conference"), Symbol("offense_score")=>Symbol("offense_score"), Symbol("defense")=>Symbol("defense"), Symbol("home")=>Symbol("home"), Symbol("away")=>Symbol("away"), Symbol("defense_conference")=>Symbol("defense_conference"), Symbol("defense_score")=>Symbol("defense_score"), Symbol("period")=>Symbol("period"), Symbol("clock")=>Symbol("clock"), Symbol("offense_timeouts")=>Symbol("offense_timeouts"), Symbol("defense_timeouts")=>Symbol("defense_timeouts"), Symbol("yard_line")=>Symbol("yard_line"), Symbol("yards_to_goal")=>Symbol("yards_to_goal"), Symbol("down")=>Symbol("down"), Symbol("distance")=>Symbol("distance"), Symbol("yards_gained")=>Symbol("yards_gained"), Symbol("scoring")=>Symbol("scoring"), Symbol("play_type")=>Symbol("play_type"), Symbol("play_text")=>Symbol("play_text"), Symbol("ppa")=>Symbol("ppa"))
const _property_types_Play = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("drive_id")=>"Int32", Symbol("game_id")=>"Int32", Symbol("drive_number")=>"Int32", Symbol("play_number")=>"Int32", Symbol("offense")=>"String", Symbol("offense_conference")=>"String", Symbol("offense_score")=>"Int32", Symbol("defense")=>"String", Symbol("home")=>"String", Symbol("away")=>"String", Symbol("defense_conference")=>"String", Symbol("defense_score")=>"Int32", Symbol("period")=>"Int32", Symbol("clock")=>"DriveStartTime", Symbol("offense_timeouts")=>"Int32", Symbol("defense_timeouts")=>"Int32", Symbol("yard_line")=>"Int32", Symbol("yards_to_goal")=>"Int32", Symbol("down")=>"Int32", Symbol("distance")=>"Int32", Symbol("yards_gained")=>"Int32", Symbol("scoring")=>"Bool", Symbol("play_type")=>"String", Symbol("play_text")=>"String", Symbol("ppa")=>"Float32")
Base.propertynames(::Type{ Play }) = collect(keys(_property_map_Play))
Swagger.property_type(::Type{ Play }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Play[name]))}
Swagger.field_name(::Type{ Play }, property_name::Symbol) =  _property_map_Play[property_name]

function check_required(o::Play)
    true
end

function validate_property(::Type{ Play }, name::Symbol, val)
end
