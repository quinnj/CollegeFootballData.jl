# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Player <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    first_name::Any # spec type: Union{ Nothing, String } # spec name: first_name
    last_name::Any # spec type: Union{ Nothing, String } # spec name: last_name
    height::Any # spec type: Union{ Nothing, Int32 } # spec name: height
    weight::Any # spec type: Union{ Nothing, Int32 } # spec name: weight
    jersey::Any # spec type: Union{ Nothing, Int32 } # spec name: jersey
    year::Any # spec type: Union{ Nothing, Int32 } # spec name: year
    position::Any # spec type: Union{ Nothing, String } # spec name: position
    city::Any # spec type: Union{ Nothing, String } # spec name: city
    state::Any # spec type: Union{ Nothing, String } # spec name: state
    country::Any # spec type: Union{ Nothing, String } # spec name: country

    function Player(;id=nothing, first_name=nothing, last_name=nothing, height=nothing, weight=nothing, jersey=nothing, year=nothing, position=nothing, city=nothing, state=nothing, country=nothing)
        o = new()
        validate_property(Player, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Player, Symbol("first_name"), first_name)
        setfield!(o, Symbol("first_name"), first_name)
        validate_property(Player, Symbol("last_name"), last_name)
        setfield!(o, Symbol("last_name"), last_name)
        validate_property(Player, Symbol("height"), height)
        setfield!(o, Symbol("height"), height)
        validate_property(Player, Symbol("weight"), weight)
        setfield!(o, Symbol("weight"), weight)
        validate_property(Player, Symbol("jersey"), jersey)
        setfield!(o, Symbol("jersey"), jersey)
        validate_property(Player, Symbol("year"), year)
        setfield!(o, Symbol("year"), year)
        validate_property(Player, Symbol("position"), position)
        setfield!(o, Symbol("position"), position)
        validate_property(Player, Symbol("city"), city)
        setfield!(o, Symbol("city"), city)
        validate_property(Player, Symbol("state"), state)
        setfield!(o, Symbol("state"), state)
        validate_property(Player, Symbol("country"), country)
        setfield!(o, Symbol("country"), country)
        o
    end
end # type Player

const _property_map_Player = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("first_name")=>Symbol("first_name"), Symbol("last_name")=>Symbol("last_name"), Symbol("height")=>Symbol("height"), Symbol("weight")=>Symbol("weight"), Symbol("jersey")=>Symbol("jersey"), Symbol("year")=>Symbol("year"), Symbol("position")=>Symbol("position"), Symbol("city")=>Symbol("city"), Symbol("state")=>Symbol("state"), Symbol("country")=>Symbol("country"))
const _property_types_Player = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("first_name")=>"String", Symbol("last_name")=>"String", Symbol("height")=>"Int32", Symbol("weight")=>"Int32", Symbol("jersey")=>"Int32", Symbol("year")=>"Int32", Symbol("position")=>"String", Symbol("city")=>"String", Symbol("state")=>"String", Symbol("country")=>"String")
Base.propertynames(::Type{ Player }) = collect(keys(_property_map_Player))
Swagger.property_type(::Type{ Player }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Player[name]))}
Swagger.field_name(::Type{ Player }, property_name::Symbol) =  _property_map_Player[property_name]

function check_required(o::Player)
    true
end

function validate_property(::Type{ Player }, name::Symbol, val)
end
