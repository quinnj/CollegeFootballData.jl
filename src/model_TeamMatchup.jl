# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TeamMatchup <: SwaggerModel
    team1::Any # spec type: Union{ Nothing, String } # spec name: team1
    team2::Any # spec type: Union{ Nothing, String } # spec name: team2
    startYear::Any # spec type: Union{ Nothing, Int32 } # spec name: startYear
    endYear::Any # spec type: Union{ Nothing, Int32 } # spec name: endYear
    team1Wins::Any # spec type: Union{ Nothing, Int32 } # spec name: team1Wins
    team2Wins::Any # spec type: Union{ Nothing, Int32 } # spec name: team2Wins
    ties::Any # spec type: Union{ Nothing, Int32 } # spec name: ties
    games::Any # spec type: Union{ Nothing, Vector{TeamMatchupGames} } # spec name: games

    function TeamMatchup(;team1=nothing, team2=nothing, startYear=nothing, endYear=nothing, team1Wins=nothing, team2Wins=nothing, ties=nothing, games=nothing)
        o = new()
        validate_property(TeamMatchup, Symbol("team1"), team1)
        setfield!(o, Symbol("team1"), team1)
        validate_property(TeamMatchup, Symbol("team2"), team2)
        setfield!(o, Symbol("team2"), team2)
        validate_property(TeamMatchup, Symbol("startYear"), startYear)
        setfield!(o, Symbol("startYear"), startYear)
        validate_property(TeamMatchup, Symbol("endYear"), endYear)
        setfield!(o, Symbol("endYear"), endYear)
        validate_property(TeamMatchup, Symbol("team1Wins"), team1Wins)
        setfield!(o, Symbol("team1Wins"), team1Wins)
        validate_property(TeamMatchup, Symbol("team2Wins"), team2Wins)
        setfield!(o, Symbol("team2Wins"), team2Wins)
        validate_property(TeamMatchup, Symbol("ties"), ties)
        setfield!(o, Symbol("ties"), ties)
        validate_property(TeamMatchup, Symbol("games"), games)
        setfield!(o, Symbol("games"), games)
        o
    end
end # type TeamMatchup

const _property_map_TeamMatchup = Dict{Symbol,Symbol}(Symbol("team1")=>Symbol("team1"), Symbol("team2")=>Symbol("team2"), Symbol("startYear")=>Symbol("startYear"), Symbol("endYear")=>Symbol("endYear"), Symbol("team1Wins")=>Symbol("team1Wins"), Symbol("team2Wins")=>Symbol("team2Wins"), Symbol("ties")=>Symbol("ties"), Symbol("games")=>Symbol("games"))
const _property_types_TeamMatchup = Dict{Symbol,String}(Symbol("team1")=>"String", Symbol("team2")=>"String", Symbol("startYear")=>"Int32", Symbol("endYear")=>"Int32", Symbol("team1Wins")=>"Int32", Symbol("team2Wins")=>"Int32", Symbol("ties")=>"Int32", Symbol("games")=>"Vector{TeamMatchupGames}")
Base.propertynames(::Type{ TeamMatchup }) = collect(keys(_property_map_TeamMatchup))
Swagger.property_type(::Type{ TeamMatchup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TeamMatchup[name]))}
Swagger.field_name(::Type{ TeamMatchup }, property_name::Symbol) =  _property_map_TeamMatchup[property_name]

function check_required(o::TeamMatchup)
    true
end

function validate_property(::Type{ TeamMatchup }, name::Symbol, val)
end
