# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Recruit <: SwaggerModel
    recruitType::Any # spec type: Union{ Nothing, String } # spec name: recruitType
    year::Any # spec type: Union{ Nothing, Int32 } # spec name: year
    ranking::Any # spec type: Union{ Nothing, Int32 } # spec name: ranking
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    school::Any # spec type: Union{ Nothing, String } # spec name: school
    committedTo::Any # spec type: Union{ Nothing, String } # spec name: committedTo
    position::Any # spec type: Union{ Nothing, String } # spec name: position
    height::Any # spec type: Union{ Nothing, Int32 } # spec name: height
    weight::Any # spec type: Union{ Nothing, Int32 } # spec name: weight
    stars::Any # spec type: Union{ Nothing, Int32 } # spec name: stars
    rating::Any # spec type: Union{ Nothing, Float32 } # spec name: rating
    city::Any # spec type: Union{ Nothing, String } # spec name: city
    stateProvince::Any # spec type: Union{ Nothing, String } # spec name: stateProvince
    country::Any # spec type: Union{ Nothing, String } # spec name: country

    function Recruit(;recruitType=nothing, year=nothing, ranking=nothing, name=nothing, school=nothing, committedTo=nothing, position=nothing, height=nothing, weight=nothing, stars=nothing, rating=nothing, city=nothing, stateProvince=nothing, country=nothing)
        o = new()
        validate_property(Recruit, Symbol("recruitType"), recruitType)
        setfield!(o, Symbol("recruitType"), recruitType)
        validate_property(Recruit, Symbol("year"), year)
        setfield!(o, Symbol("year"), year)
        validate_property(Recruit, Symbol("ranking"), ranking)
        setfield!(o, Symbol("ranking"), ranking)
        validate_property(Recruit, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(Recruit, Symbol("school"), school)
        setfield!(o, Symbol("school"), school)
        validate_property(Recruit, Symbol("committedTo"), committedTo)
        setfield!(o, Symbol("committedTo"), committedTo)
        validate_property(Recruit, Symbol("position"), position)
        setfield!(o, Symbol("position"), position)
        validate_property(Recruit, Symbol("height"), height)
        setfield!(o, Symbol("height"), height)
        validate_property(Recruit, Symbol("weight"), weight)
        setfield!(o, Symbol("weight"), weight)
        validate_property(Recruit, Symbol("stars"), stars)
        setfield!(o, Symbol("stars"), stars)
        validate_property(Recruit, Symbol("rating"), rating)
        setfield!(o, Symbol("rating"), rating)
        validate_property(Recruit, Symbol("city"), city)
        setfield!(o, Symbol("city"), city)
        validate_property(Recruit, Symbol("stateProvince"), stateProvince)
        setfield!(o, Symbol("stateProvince"), stateProvince)
        validate_property(Recruit, Symbol("country"), country)
        setfield!(o, Symbol("country"), country)
        o
    end
end # type Recruit

const _property_map_Recruit = Dict{Symbol,Symbol}(Symbol("recruitType")=>Symbol("recruitType"), Symbol("year")=>Symbol("year"), Symbol("ranking")=>Symbol("ranking"), Symbol("name")=>Symbol("name"), Symbol("school")=>Symbol("school"), Symbol("committedTo")=>Symbol("committedTo"), Symbol("position")=>Symbol("position"), Symbol("height")=>Symbol("height"), Symbol("weight")=>Symbol("weight"), Symbol("stars")=>Symbol("stars"), Symbol("rating")=>Symbol("rating"), Symbol("city")=>Symbol("city"), Symbol("stateProvince")=>Symbol("stateProvince"), Symbol("country")=>Symbol("country"))
const _property_types_Recruit = Dict{Symbol,String}(Symbol("recruitType")=>"String", Symbol("year")=>"Int32", Symbol("ranking")=>"Int32", Symbol("name")=>"String", Symbol("school")=>"String", Symbol("committedTo")=>"String", Symbol("position")=>"String", Symbol("height")=>"Int32", Symbol("weight")=>"Int32", Symbol("stars")=>"Int32", Symbol("rating")=>"Float32", Symbol("city")=>"String", Symbol("stateProvince")=>"String", Symbol("country")=>"String")
Base.propertynames(::Type{ Recruit }) = collect(keys(_property_map_Recruit))
Swagger.property_type(::Type{ Recruit }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Recruit[name]))}
Swagger.field_name(::Type{ Recruit }, property_name::Symbol) =  _property_map_Recruit[property_name]

function check_required(o::Recruit)
    true
end

function validate_property(::Type{ Recruit }, name::Symbol, val)
end
