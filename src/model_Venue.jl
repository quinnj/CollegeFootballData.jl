# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Venue <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    capacity::Any # spec type: Union{ Nothing, Int32 } # spec name: capacity
    grass::Any # spec type: Union{ Nothing, Bool } # spec name: grass
    city::Any # spec type: Union{ Nothing, String } # spec name: city
    state::Any # spec type: Union{ Nothing, String } # spec name: state
    zip::Any # spec type: Union{ Nothing, String } # spec name: zip
    country_code::Any # spec type: Union{ Nothing, String } # spec name: country_code
    location::Any # spec type: Union{ Nothing, VenueLocation } # spec name: location
    elevation::Any # spec type: Union{ Nothing, Int32 } # spec name: elevation
    year::Any # spec type: Union{ Nothing, Int32 } # spec name: year
    dome::Any # spec type: Union{ Nothing, Bool } # spec name: dome
    timezone::Any # spec type: Union{ Nothing, String } # spec name: timezone

    function Venue(;id=nothing, name=nothing, capacity=nothing, grass=nothing, city=nothing, state=nothing, zip=nothing, country_code=nothing, location=nothing, elevation=nothing, year=nothing, dome=nothing, timezone=nothing)
        o = new()
        validate_property(Venue, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Venue, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(Venue, Symbol("capacity"), capacity)
        setfield!(o, Symbol("capacity"), capacity)
        validate_property(Venue, Symbol("grass"), grass)
        setfield!(o, Symbol("grass"), grass)
        validate_property(Venue, Symbol("city"), city)
        setfield!(o, Symbol("city"), city)
        validate_property(Venue, Symbol("state"), state)
        setfield!(o, Symbol("state"), state)
        validate_property(Venue, Symbol("zip"), zip)
        setfield!(o, Symbol("zip"), zip)
        validate_property(Venue, Symbol("country_code"), country_code)
        setfield!(o, Symbol("country_code"), country_code)
        validate_property(Venue, Symbol("location"), location)
        setfield!(o, Symbol("location"), location)
        validate_property(Venue, Symbol("elevation"), elevation)
        setfield!(o, Symbol("elevation"), elevation)
        validate_property(Venue, Symbol("year"), year)
        setfield!(o, Symbol("year"), year)
        validate_property(Venue, Symbol("dome"), dome)
        setfield!(o, Symbol("dome"), dome)
        validate_property(Venue, Symbol("timezone"), timezone)
        setfield!(o, Symbol("timezone"), timezone)
        o
    end
end # type Venue

const _property_map_Venue = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("name")=>Symbol("name"), Symbol("capacity")=>Symbol("capacity"), Symbol("grass")=>Symbol("grass"), Symbol("city")=>Symbol("city"), Symbol("state")=>Symbol("state"), Symbol("zip")=>Symbol("zip"), Symbol("country_code")=>Symbol("country_code"), Symbol("location")=>Symbol("location"), Symbol("elevation")=>Symbol("elevation"), Symbol("year")=>Symbol("year"), Symbol("dome")=>Symbol("dome"), Symbol("timezone")=>Symbol("timezone"))
const _property_types_Venue = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("name")=>"String", Symbol("capacity")=>"Int32", Symbol("grass")=>"Bool", Symbol("city")=>"String", Symbol("state")=>"String", Symbol("zip")=>"String", Symbol("country_code")=>"String", Symbol("location")=>"VenueLocation", Symbol("elevation")=>"Int32", Symbol("year")=>"Int32", Symbol("dome")=>"Bool", Symbol("timezone")=>"String")
Base.propertynames(::Type{ Venue }) = collect(keys(_property_map_Venue))
Swagger.property_type(::Type{ Venue }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Venue[name]))}
Swagger.field_name(::Type{ Venue }, property_name::Symbol) =  _property_map_Venue[property_name]

function check_required(o::Venue)
    true
end

function validate_property(::Type{ Venue }, name::Symbol, val)
end
