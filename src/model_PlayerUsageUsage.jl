# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayerUsageUsage <: SwaggerModel
    overall::Any # spec type: Union{ Nothing, Float32 } # spec name: overall
    pass::Any # spec type: Union{ Nothing, Float32 } # spec name: pass
    rush::Any # spec type: Union{ Nothing, Float32 } # spec name: rush
    firstDown::Any # spec type: Union{ Nothing, Float32 } # spec name: firstDown
    secondDown::Any # spec type: Union{ Nothing, Float32 } # spec name: secondDown
    thirdDown::Any # spec type: Union{ Nothing, Float32 } # spec name: thirdDown
    standardDowns::Any # spec type: Union{ Nothing, Float32 } # spec name: standardDowns
    passingDowns::Any # spec type: Union{ Nothing, Float32 } # spec name: passingDowns

    function PlayerUsageUsage(;overall=nothing, pass=nothing, rush=nothing, firstDown=nothing, secondDown=nothing, thirdDown=nothing, standardDowns=nothing, passingDowns=nothing)
        o = new()
        validate_property(PlayerUsageUsage, Symbol("overall"), overall)
        setfield!(o, Symbol("overall"), overall)
        validate_property(PlayerUsageUsage, Symbol("pass"), pass)
        setfield!(o, Symbol("pass"), pass)
        validate_property(PlayerUsageUsage, Symbol("rush"), rush)
        setfield!(o, Symbol("rush"), rush)
        validate_property(PlayerUsageUsage, Symbol("firstDown"), firstDown)
        setfield!(o, Symbol("firstDown"), firstDown)
        validate_property(PlayerUsageUsage, Symbol("secondDown"), secondDown)
        setfield!(o, Symbol("secondDown"), secondDown)
        validate_property(PlayerUsageUsage, Symbol("thirdDown"), thirdDown)
        setfield!(o, Symbol("thirdDown"), thirdDown)
        validate_property(PlayerUsageUsage, Symbol("standardDowns"), standardDowns)
        setfield!(o, Symbol("standardDowns"), standardDowns)
        validate_property(PlayerUsageUsage, Symbol("passingDowns"), passingDowns)
        setfield!(o, Symbol("passingDowns"), passingDowns)
        o
    end
end # type PlayerUsageUsage

const _property_map_PlayerUsageUsage = Dict{Symbol,Symbol}(Symbol("overall")=>Symbol("overall"), Symbol("pass")=>Symbol("pass"), Symbol("rush")=>Symbol("rush"), Symbol("firstDown")=>Symbol("firstDown"), Symbol("secondDown")=>Symbol("secondDown"), Symbol("thirdDown")=>Symbol("thirdDown"), Symbol("standardDowns")=>Symbol("standardDowns"), Symbol("passingDowns")=>Symbol("passingDowns"))
const _property_types_PlayerUsageUsage = Dict{Symbol,String}(Symbol("overall")=>"Float32", Symbol("pass")=>"Float32", Symbol("rush")=>"Float32", Symbol("firstDown")=>"Float32", Symbol("secondDown")=>"Float32", Symbol("thirdDown")=>"Float32", Symbol("standardDowns")=>"Float32", Symbol("passingDowns")=>"Float32")
Base.propertynames(::Type{ PlayerUsageUsage }) = collect(keys(_property_map_PlayerUsageUsage))
Swagger.property_type(::Type{ PlayerUsageUsage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayerUsageUsage[name]))}
Swagger.field_name(::Type{ PlayerUsageUsage }, property_name::Symbol) =  _property_map_PlayerUsageUsage[property_name]

function check_required(o::PlayerUsageUsage)
    true
end

function validate_property(::Type{ PlayerUsageUsage }, name::Symbol, val)
end
