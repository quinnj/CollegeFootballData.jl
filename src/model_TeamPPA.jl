# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TeamPPA <: SwaggerModel
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    team::Any # spec type: Union{ Nothing, String } # spec name: team
    conference::Any # spec type: Union{ Nothing, String } # spec name: conference
    offense::Any # spec type: Union{ Nothing, TeamPPAOffense } # spec name: offense
    defense::Any # spec type: Union{ Nothing, TeamPPAOffense } # spec name: defense

    function TeamPPA(;season=nothing, team=nothing, conference=nothing, offense=nothing, defense=nothing)
        o = new()
        validate_property(TeamPPA, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(TeamPPA, Symbol("team"), team)
        setfield!(o, Symbol("team"), team)
        validate_property(TeamPPA, Symbol("conference"), conference)
        setfield!(o, Symbol("conference"), conference)
        validate_property(TeamPPA, Symbol("offense"), offense)
        setfield!(o, Symbol("offense"), offense)
        validate_property(TeamPPA, Symbol("defense"), defense)
        setfield!(o, Symbol("defense"), defense)
        o
    end
end # type TeamPPA

const _property_map_TeamPPA = Dict{Symbol,Symbol}(Symbol("season")=>Symbol("season"), Symbol("team")=>Symbol("team"), Symbol("conference")=>Symbol("conference"), Symbol("offense")=>Symbol("offense"), Symbol("defense")=>Symbol("defense"))
const _property_types_TeamPPA = Dict{Symbol,String}(Symbol("season")=>"Int32", Symbol("team")=>"String", Symbol("conference")=>"String", Symbol("offense")=>"TeamPPAOffense", Symbol("defense")=>"TeamPPAOffense")
Base.propertynames(::Type{ TeamPPA }) = collect(keys(_property_map_TeamPPA))
Swagger.property_type(::Type{ TeamPPA }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TeamPPA[name]))}
Swagger.field_name(::Type{ TeamPPA }, property_name::Symbol) =  _property_map_TeamPPA[property_name]

function check_required(o::TeamPPA)
    true
end

function validate_property(::Type{ TeamPPA }, name::Symbol, val)
end
