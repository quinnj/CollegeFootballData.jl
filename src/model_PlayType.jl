# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayType <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    text::Any # spec type: Union{ Nothing, String } # spec name: text
    abbreviation::Any # spec type: Union{ Nothing, String } # spec name: abbreviation

    function PlayType(;id=nothing, text=nothing, abbreviation=nothing)
        o = new()
        validate_property(PlayType, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(PlayType, Symbol("text"), text)
        setfield!(o, Symbol("text"), text)
        validate_property(PlayType, Symbol("abbreviation"), abbreviation)
        setfield!(o, Symbol("abbreviation"), abbreviation)
        o
    end
end # type PlayType

const _property_map_PlayType = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("text")=>Symbol("text"), Symbol("abbreviation")=>Symbol("abbreviation"))
const _property_types_PlayType = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("text")=>"String", Symbol("abbreviation")=>"String")
Base.propertynames(::Type{ PlayType }) = collect(keys(_property_map_PlayType))
Swagger.property_type(::Type{ PlayType }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayType[name]))}
Swagger.field_name(::Type{ PlayType }, property_name::Symbol) =  _property_map_PlayType[property_name]

function check_required(o::PlayType)
    true
end

function validate_property(::Type{ PlayType }, name::Symbol, val)
end
