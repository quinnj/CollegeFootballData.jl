# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct RecruitingApi <: SwaggerApi
    client::Swagger.Client
end

"""
Recruit position group ratings
Gets a list of aggregated statistics by team and position grouping
Param: startYear::Int32
Param: endYear::Int32
Param: team::String
Param: conference::String
Return: Vector{PositionGroupRecruitingRating}
"""
function getRecruitingGroups(_api::RecruitingApi; startYear=nothing, endYear=nothing, team=nothing, conference=nothing, _mediaType=nothing)
    Swagger.validate_param("startYear", "getRecruitingGroups", :minimum, startYear, 2000, false)

    Swagger.validate_param("endYear", "getRecruitingGroups", :minimum, endYear, 2000, false)

    _ctx = Swagger.Ctx(_api.client, "GET", Vector{PositionGroupRecruitingRating}, "/recruiting/groups", [])
    Swagger.set_param(_ctx.query, "startYear", startYear)  # type Int32
    Swagger.set_param(_ctx.query, "endYear", endYear)  # type Int32
    Swagger.set_param(_ctx.query, "team", team)  # type String
    Swagger.set_param(_ctx.query, "conference", conference)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Player recruiting ratings and rankings
Get player recruiting rankings and data. Requires either a year or team to be specified.
Param: year::Int32
Param: classification::String
Param: position::String
Param: state::String
Param: team::String
Return: Vector{Recruit}
"""
function getRecruitingPlayers(_api::RecruitingApi; year=nothing, classification=nothing, position=nothing, state=nothing, team=nothing, _mediaType=nothing)
    Swagger.validate_param("year", "getRecruitingPlayers", :minimum, year, 2000, false)

    _ctx = Swagger.Ctx(_api.client, "GET", Vector{Recruit}, "/recruiting/players", [])
    Swagger.set_param(_ctx.query, "year", year)  # type Int32
    Swagger.set_param(_ctx.query, "classification", classification)  # type String
    Swagger.set_param(_ctx.query, "position", position)  # type String
    Swagger.set_param(_ctx.query, "state", state)  # type String
    Swagger.set_param(_ctx.query, "team", team)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Team recruiting rankings and ratings
Team recruiting rankings
Param: year::Int32
Param: team::String
Return: Vector{TeamRecruitingRank}
"""
function getRecruitingTeams(_api::RecruitingApi; year=nothing, team=nothing, _mediaType=nothing)
    Swagger.validate_param("year", "getRecruitingTeams", :minimum, year, 2000, false)

    _ctx = Swagger.Ctx(_api.client, "GET", Vector{TeamRecruitingRank}, "/recruiting/teams", [])
    Swagger.set_param(_ctx.query, "year", year)  # type Int32
    Swagger.set_param(_ctx.query, "team", team)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

export getRecruitingGroups, getRecruitingPlayers, getRecruitingTeams
