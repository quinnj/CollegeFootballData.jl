# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayerUsage <: SwaggerModel
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    position::Any # spec type: Union{ Nothing, String } # spec name: position
    team::Any # spec type: Union{ Nothing, String } # spec name: team
    conference::Any # spec type: Union{ Nothing, String } # spec name: conference
    usage::Any # spec type: Union{ Nothing, PlayerUsageUsage } # spec name: usage

    function PlayerUsage(;season=nothing, id=nothing, name=nothing, position=nothing, team=nothing, conference=nothing, usage=nothing)
        o = new()
        validate_property(PlayerUsage, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(PlayerUsage, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(PlayerUsage, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(PlayerUsage, Symbol("position"), position)
        setfield!(o, Symbol("position"), position)
        validate_property(PlayerUsage, Symbol("team"), team)
        setfield!(o, Symbol("team"), team)
        validate_property(PlayerUsage, Symbol("conference"), conference)
        setfield!(o, Symbol("conference"), conference)
        validate_property(PlayerUsage, Symbol("usage"), usage)
        setfield!(o, Symbol("usage"), usage)
        o
    end
end # type PlayerUsage

const _property_map_PlayerUsage = Dict{Symbol,Symbol}(Symbol("season")=>Symbol("season"), Symbol("id")=>Symbol("id"), Symbol("name")=>Symbol("name"), Symbol("position")=>Symbol("position"), Symbol("team")=>Symbol("team"), Symbol("conference")=>Symbol("conference"), Symbol("usage")=>Symbol("usage"))
const _property_types_PlayerUsage = Dict{Symbol,String}(Symbol("season")=>"Int32", Symbol("id")=>"Int32", Symbol("name")=>"String", Symbol("position")=>"String", Symbol("team")=>"String", Symbol("conference")=>"String", Symbol("usage")=>"PlayerUsageUsage")
Base.propertynames(::Type{ PlayerUsage }) = collect(keys(_property_map_PlayerUsage))
Swagger.property_type(::Type{ PlayerUsage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayerUsage[name]))}
Swagger.field_name(::Type{ PlayerUsage }, property_name::Symbol) =  _property_map_PlayerUsage[property_name]

function check_required(o::PlayerUsage)
    true
end

function validate_property(::Type{ PlayerUsage }, name::Symbol, val)
end
