# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayWP <: SwaggerModel
    gamesId::Any # spec type: Union{ Nothing, Int32 } # spec name: gamesId
    playId::Any # spec type: Union{ Nothing, Int32 } # spec name: playId
    playText::Any # spec type: Union{ Nothing, String } # spec name: playText
    homeId::Any # spec type: Union{ Nothing, Int32 } # spec name: homeId
    home::Any # spec type: Union{ Nothing, String } # spec name: home
    awayId::Any # spec type: Union{ Nothing, Int32 } # spec name: awayId
    away::Any # spec type: Union{ Nothing, String } # spec name: away
    spread::Any # spec type: Union{ Nothing, Float32 } # spec name: spread
    homeBall::Any # spec type: Union{ Nothing, Bool } # spec name: homeBall
    homeScore::Any # spec type: Union{ Nothing, Int32 } # spec name: homeScore
    awayScore::Any # spec type: Union{ Nothing, Int32 } # spec name: awayScore
    timeRemaining::Any # spec type: Union{ Nothing, Int32 } # spec name: timeRemaining
    yardLine::Any # spec type: Union{ Nothing, Int32 } # spec name: yardLine
    down::Any # spec type: Union{ Nothing, Int32 } # spec name: down
    distance::Any # spec type: Union{ Nothing, Int32 } # spec name: distance
    homeWinProb::Any # spec type: Union{ Nothing, Float32 } # spec name: homeWinProb
    playNumber::Any # spec type: Union{ Nothing, Int32 } # spec name: playNumber

    function PlayWP(;gamesId=nothing, playId=nothing, playText=nothing, homeId=nothing, home=nothing, awayId=nothing, away=nothing, spread=nothing, homeBall=nothing, homeScore=nothing, awayScore=nothing, timeRemaining=nothing, yardLine=nothing, down=nothing, distance=nothing, homeWinProb=nothing, playNumber=nothing)
        o = new()
        validate_property(PlayWP, Symbol("gamesId"), gamesId)
        setfield!(o, Symbol("gamesId"), gamesId)
        validate_property(PlayWP, Symbol("playId"), playId)
        setfield!(o, Symbol("playId"), playId)
        validate_property(PlayWP, Symbol("playText"), playText)
        setfield!(o, Symbol("playText"), playText)
        validate_property(PlayWP, Symbol("homeId"), homeId)
        setfield!(o, Symbol("homeId"), homeId)
        validate_property(PlayWP, Symbol("home"), home)
        setfield!(o, Symbol("home"), home)
        validate_property(PlayWP, Symbol("awayId"), awayId)
        setfield!(o, Symbol("awayId"), awayId)
        validate_property(PlayWP, Symbol("away"), away)
        setfield!(o, Symbol("away"), away)
        validate_property(PlayWP, Symbol("spread"), spread)
        setfield!(o, Symbol("spread"), spread)
        validate_property(PlayWP, Symbol("homeBall"), homeBall)
        setfield!(o, Symbol("homeBall"), homeBall)
        validate_property(PlayWP, Symbol("homeScore"), homeScore)
        setfield!(o, Symbol("homeScore"), homeScore)
        validate_property(PlayWP, Symbol("awayScore"), awayScore)
        setfield!(o, Symbol("awayScore"), awayScore)
        validate_property(PlayWP, Symbol("timeRemaining"), timeRemaining)
        setfield!(o, Symbol("timeRemaining"), timeRemaining)
        validate_property(PlayWP, Symbol("yardLine"), yardLine)
        setfield!(o, Symbol("yardLine"), yardLine)
        validate_property(PlayWP, Symbol("down"), down)
        setfield!(o, Symbol("down"), down)
        validate_property(PlayWP, Symbol("distance"), distance)
        setfield!(o, Symbol("distance"), distance)
        validate_property(PlayWP, Symbol("homeWinProb"), homeWinProb)
        setfield!(o, Symbol("homeWinProb"), homeWinProb)
        validate_property(PlayWP, Symbol("playNumber"), playNumber)
        setfield!(o, Symbol("playNumber"), playNumber)
        o
    end
end # type PlayWP

const _property_map_PlayWP = Dict{Symbol,Symbol}(Symbol("gamesId")=>Symbol("gamesId"), Symbol("playId")=>Symbol("playId"), Symbol("playText")=>Symbol("playText"), Symbol("homeId")=>Symbol("homeId"), Symbol("home")=>Symbol("home"), Symbol("awayId")=>Symbol("awayId"), Symbol("away")=>Symbol("away"), Symbol("spread")=>Symbol("spread"), Symbol("homeBall")=>Symbol("homeBall"), Symbol("homeScore")=>Symbol("homeScore"), Symbol("awayScore")=>Symbol("awayScore"), Symbol("timeRemaining")=>Symbol("timeRemaining"), Symbol("yardLine")=>Symbol("yardLine"), Symbol("down")=>Symbol("down"), Symbol("distance")=>Symbol("distance"), Symbol("homeWinProb")=>Symbol("homeWinProb"), Symbol("playNumber")=>Symbol("playNumber"))
const _property_types_PlayWP = Dict{Symbol,String}(Symbol("gamesId")=>"Int32", Symbol("playId")=>"Int32", Symbol("playText")=>"String", Symbol("homeId")=>"Int32", Symbol("home")=>"String", Symbol("awayId")=>"Int32", Symbol("away")=>"String", Symbol("spread")=>"Float32", Symbol("homeBall")=>"Bool", Symbol("homeScore")=>"Int32", Symbol("awayScore")=>"Int32", Symbol("timeRemaining")=>"Int32", Symbol("yardLine")=>"Int32", Symbol("down")=>"Int32", Symbol("distance")=>"Int32", Symbol("homeWinProb")=>"Float32", Symbol("playNumber")=>"Int32")
Base.propertynames(::Type{ PlayWP }) = collect(keys(_property_map_PlayWP))
Swagger.property_type(::Type{ PlayWP }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayWP[name]))}
Swagger.field_name(::Type{ PlayWP }, property_name::Symbol) =  _property_map_PlayWP[property_name]

function check_required(o::PlayWP)
    true
end

function validate_property(::Type{ PlayWP }, name::Symbol, val)
end
