# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Drive <: SwaggerModel
    offense::Any # spec type: Union{ Nothing, String } # spec name: offense
    offense_conference::Any # spec type: Union{ Nothing, String } # spec name: offense_conference
    defense::Any # spec type: Union{ Nothing, String } # spec name: defense
    defense_conference::Any # spec type: Union{ Nothing, String } # spec name: defense_conference
    game_id::Any # spec type: Union{ Nothing, Int32 } # spec name: game_id
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    drive_number::Any # spec type: Union{ Nothing, Int32 } # spec name: drive_number
    scoring::Any # spec type: Union{ Nothing, Bool } # spec name: scoring
    start_period::Any # spec type: Union{ Nothing, Int32 } # spec name: start_period
    start_yardline::Any # spec type: Union{ Nothing, Int32 } # spec name: start_yardline
    start_yards_to_goal::Any # spec type: Union{ Nothing, Int32 } # spec name: start_yards_to_goal
    start_time::Any # spec type: Union{ Nothing, DriveStartTime } # spec name: start_time
    end_period::Any # spec type: Union{ Nothing, Int32 } # spec name: end_period
    end_yardline::Any # spec type: Union{ Nothing, Int32 } # spec name: end_yardline
    end_yards_to_goal::Any # spec type: Union{ Nothing, Int32 } # spec name: end_yards_to_goal
    end_time::Any # spec type: Union{ Nothing, DriveStartTime } # spec name: end_time
    plays::Any # spec type: Union{ Nothing, Int32 } # spec name: plays
    yards::Any # spec type: Union{ Nothing, Int32 } # spec name: yards
    drive_result::Any # spec type: Union{ Nothing, String } # spec name: drive_result

    function Drive(;offense=nothing, offense_conference=nothing, defense=nothing, defense_conference=nothing, game_id=nothing, id=nothing, drive_number=nothing, scoring=nothing, start_period=nothing, start_yardline=nothing, start_yards_to_goal=nothing, start_time=nothing, end_period=nothing, end_yardline=nothing, end_yards_to_goal=nothing, end_time=nothing, plays=nothing, yards=nothing, drive_result=nothing)
        o = new()
        validate_property(Drive, Symbol("offense"), offense)
        setfield!(o, Symbol("offense"), offense)
        validate_property(Drive, Symbol("offense_conference"), offense_conference)
        setfield!(o, Symbol("offense_conference"), offense_conference)
        validate_property(Drive, Symbol("defense"), defense)
        setfield!(o, Symbol("defense"), defense)
        validate_property(Drive, Symbol("defense_conference"), defense_conference)
        setfield!(o, Symbol("defense_conference"), defense_conference)
        validate_property(Drive, Symbol("game_id"), game_id)
        setfield!(o, Symbol("game_id"), game_id)
        validate_property(Drive, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Drive, Symbol("drive_number"), drive_number)
        setfield!(o, Symbol("drive_number"), drive_number)
        validate_property(Drive, Symbol("scoring"), scoring)
        setfield!(o, Symbol("scoring"), scoring)
        validate_property(Drive, Symbol("start_period"), start_period)
        setfield!(o, Symbol("start_period"), start_period)
        validate_property(Drive, Symbol("start_yardline"), start_yardline)
        setfield!(o, Symbol("start_yardline"), start_yardline)
        validate_property(Drive, Symbol("start_yards_to_goal"), start_yards_to_goal)
        setfield!(o, Symbol("start_yards_to_goal"), start_yards_to_goal)
        validate_property(Drive, Symbol("start_time"), start_time)
        setfield!(o, Symbol("start_time"), start_time)
        validate_property(Drive, Symbol("end_period"), end_period)
        setfield!(o, Symbol("end_period"), end_period)
        validate_property(Drive, Symbol("end_yardline"), end_yardline)
        setfield!(o, Symbol("end_yardline"), end_yardline)
        validate_property(Drive, Symbol("end_yards_to_goal"), end_yards_to_goal)
        setfield!(o, Symbol("end_yards_to_goal"), end_yards_to_goal)
        validate_property(Drive, Symbol("end_time"), end_time)
        setfield!(o, Symbol("end_time"), end_time)
        validate_property(Drive, Symbol("plays"), plays)
        setfield!(o, Symbol("plays"), plays)
        validate_property(Drive, Symbol("yards"), yards)
        setfield!(o, Symbol("yards"), yards)
        validate_property(Drive, Symbol("drive_result"), drive_result)
        setfield!(o, Symbol("drive_result"), drive_result)
        o
    end
end # type Drive

const _property_map_Drive = Dict{Symbol,Symbol}(Symbol("offense")=>Symbol("offense"), Symbol("offense_conference")=>Symbol("offense_conference"), Symbol("defense")=>Symbol("defense"), Symbol("defense_conference")=>Symbol("defense_conference"), Symbol("game_id")=>Symbol("game_id"), Symbol("id")=>Symbol("id"), Symbol("drive_number")=>Symbol("drive_number"), Symbol("scoring")=>Symbol("scoring"), Symbol("start_period")=>Symbol("start_period"), Symbol("start_yardline")=>Symbol("start_yardline"), Symbol("start_yards_to_goal")=>Symbol("start_yards_to_goal"), Symbol("start_time")=>Symbol("start_time"), Symbol("end_period")=>Symbol("end_period"), Symbol("end_yardline")=>Symbol("end_yardline"), Symbol("end_yards_to_goal")=>Symbol("end_yards_to_goal"), Symbol("end_time")=>Symbol("end_time"), Symbol("plays")=>Symbol("plays"), Symbol("yards")=>Symbol("yards"), Symbol("drive_result")=>Symbol("drive_result"))
const _property_types_Drive = Dict{Symbol,String}(Symbol("offense")=>"String", Symbol("offense_conference")=>"String", Symbol("defense")=>"String", Symbol("defense_conference")=>"String", Symbol("game_id")=>"Int32", Symbol("id")=>"Int32", Symbol("drive_number")=>"Int32", Symbol("scoring")=>"Bool", Symbol("start_period")=>"Int32", Symbol("start_yardline")=>"Int32", Symbol("start_yards_to_goal")=>"Int32", Symbol("start_time")=>"DriveStartTime", Symbol("end_period")=>"Int32", Symbol("end_yardline")=>"Int32", Symbol("end_yards_to_goal")=>"Int32", Symbol("end_time")=>"DriveStartTime", Symbol("plays")=>"Int32", Symbol("yards")=>"Int32", Symbol("drive_result")=>"String")
Base.propertynames(::Type{ Drive }) = collect(keys(_property_map_Drive))
Swagger.property_type(::Type{ Drive }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Drive[name]))}
Swagger.field_name(::Type{ Drive }, property_name::Symbol) =  _property_map_Drive[property_name]

function check_required(o::Drive)
    true
end

function validate_property(::Type{ Drive }, name::Symbol, val)
end
