# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayStat <: SwaggerModel
    gameId::Any # spec type: Union{ Nothing, Int32 } # spec name: gameId
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    week::Any # spec type: Union{ Nothing, Int32 } # spec name: week
    opponent::Any # spec type: Union{ Nothing, String } # spec name: opponent
    teamScore::Any # spec type: Union{ Nothing, Int32 } # spec name: teamScore
    opponentScore::Any # spec type: Union{ Nothing, Int32 } # spec name: opponentScore
    driveId::Any # spec type: Union{ Nothing, Int32 } # spec name: driveId
    playId::Any # spec type: Union{ Nothing, Int32 } # spec name: playId
    period::Any # spec type: Union{ Nothing, Int32 } # spec name: period
    clock::Any # spec type: Union{ Nothing, DriveStartTime } # spec name: clock
    yardsToGoal::Any # spec type: Union{ Nothing, Int32 } # spec name: yardsToGoal
    down::Any # spec type: Union{ Nothing, Int32 } # spec name: down
    distance::Any # spec type: Union{ Nothing, Int32 } # spec name: distance
    athleteId::Any # spec type: Union{ Nothing, Int32 } # spec name: athleteId
    athleteName::Any # spec type: Union{ Nothing, String } # spec name: athleteName
    statType::Any # spec type: Union{ Nothing, String } # spec name: statType
    stat::Any # spec type: Union{ Nothing, Int32 } # spec name: stat

    function PlayStat(;gameId=nothing, season=nothing, week=nothing, opponent=nothing, teamScore=nothing, opponentScore=nothing, driveId=nothing, playId=nothing, period=nothing, clock=nothing, yardsToGoal=nothing, down=nothing, distance=nothing, athleteId=nothing, athleteName=nothing, statType=nothing, stat=nothing)
        o = new()
        validate_property(PlayStat, Symbol("gameId"), gameId)
        setfield!(o, Symbol("gameId"), gameId)
        validate_property(PlayStat, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(PlayStat, Symbol("week"), week)
        setfield!(o, Symbol("week"), week)
        validate_property(PlayStat, Symbol("opponent"), opponent)
        setfield!(o, Symbol("opponent"), opponent)
        validate_property(PlayStat, Symbol("teamScore"), teamScore)
        setfield!(o, Symbol("teamScore"), teamScore)
        validate_property(PlayStat, Symbol("opponentScore"), opponentScore)
        setfield!(o, Symbol("opponentScore"), opponentScore)
        validate_property(PlayStat, Symbol("driveId"), driveId)
        setfield!(o, Symbol("driveId"), driveId)
        validate_property(PlayStat, Symbol("playId"), playId)
        setfield!(o, Symbol("playId"), playId)
        validate_property(PlayStat, Symbol("period"), period)
        setfield!(o, Symbol("period"), period)
        validate_property(PlayStat, Symbol("clock"), clock)
        setfield!(o, Symbol("clock"), clock)
        validate_property(PlayStat, Symbol("yardsToGoal"), yardsToGoal)
        setfield!(o, Symbol("yardsToGoal"), yardsToGoal)
        validate_property(PlayStat, Symbol("down"), down)
        setfield!(o, Symbol("down"), down)
        validate_property(PlayStat, Symbol("distance"), distance)
        setfield!(o, Symbol("distance"), distance)
        validate_property(PlayStat, Symbol("athleteId"), athleteId)
        setfield!(o, Symbol("athleteId"), athleteId)
        validate_property(PlayStat, Symbol("athleteName"), athleteName)
        setfield!(o, Symbol("athleteName"), athleteName)
        validate_property(PlayStat, Symbol("statType"), statType)
        setfield!(o, Symbol("statType"), statType)
        validate_property(PlayStat, Symbol("stat"), stat)
        setfield!(o, Symbol("stat"), stat)
        o
    end
end # type PlayStat

const _property_map_PlayStat = Dict{Symbol,Symbol}(Symbol("gameId")=>Symbol("gameId"), Symbol("season")=>Symbol("season"), Symbol("week")=>Symbol("week"), Symbol("opponent")=>Symbol("opponent"), Symbol("teamScore")=>Symbol("teamScore"), Symbol("opponentScore")=>Symbol("opponentScore"), Symbol("driveId")=>Symbol("driveId"), Symbol("playId")=>Symbol("playId"), Symbol("period")=>Symbol("period"), Symbol("clock")=>Symbol("clock"), Symbol("yardsToGoal")=>Symbol("yardsToGoal"), Symbol("down")=>Symbol("down"), Symbol("distance")=>Symbol("distance"), Symbol("athleteId")=>Symbol("athleteId"), Symbol("athleteName")=>Symbol("athleteName"), Symbol("statType")=>Symbol("statType"), Symbol("stat")=>Symbol("stat"))
const _property_types_PlayStat = Dict{Symbol,String}(Symbol("gameId")=>"Int32", Symbol("season")=>"Int32", Symbol("week")=>"Int32", Symbol("opponent")=>"String", Symbol("teamScore")=>"Int32", Symbol("opponentScore")=>"Int32", Symbol("driveId")=>"Int32", Symbol("playId")=>"Int32", Symbol("period")=>"Int32", Symbol("clock")=>"DriveStartTime", Symbol("yardsToGoal")=>"Int32", Symbol("down")=>"Int32", Symbol("distance")=>"Int32", Symbol("athleteId")=>"Int32", Symbol("athleteName")=>"String", Symbol("statType")=>"String", Symbol("stat")=>"Int32")
Base.propertynames(::Type{ PlayStat }) = collect(keys(_property_map_PlayStat))
Swagger.property_type(::Type{ PlayStat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayStat[name]))}
Swagger.field_name(::Type{ PlayStat }, property_name::Symbol) =  _property_map_PlayStat[property_name]

function check_required(o::PlayStat)
    true
end

function validate_property(::Type{ PlayStat }, name::Symbol, val)
end
