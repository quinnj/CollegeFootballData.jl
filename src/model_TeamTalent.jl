# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TeamTalent <: SwaggerModel
    year::Any # spec type: Union{ Nothing, Int32 } # spec name: year
    school::Any # spec type: Union{ Nothing, String } # spec name: school
    talent::Any # spec type: Union{ Nothing, Float32 } # spec name: talent

    function TeamTalent(;year=nothing, school=nothing, talent=nothing)
        o = new()
        validate_property(TeamTalent, Symbol("year"), year)
        setfield!(o, Symbol("year"), year)
        validate_property(TeamTalent, Symbol("school"), school)
        setfield!(o, Symbol("school"), school)
        validate_property(TeamTalent, Symbol("talent"), talent)
        setfield!(o, Symbol("talent"), talent)
        o
    end
end # type TeamTalent

const _property_map_TeamTalent = Dict{Symbol,Symbol}(Symbol("year")=>Symbol("year"), Symbol("school")=>Symbol("school"), Symbol("talent")=>Symbol("talent"))
const _property_types_TeamTalent = Dict{Symbol,String}(Symbol("year")=>"Int32", Symbol("school")=>"String", Symbol("talent")=>"Float32")
Base.propertynames(::Type{ TeamTalent }) = collect(keys(_property_map_TeamTalent))
Swagger.property_type(::Type{ TeamTalent }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TeamTalent[name]))}
Swagger.field_name(::Type{ TeamTalent }, property_name::Symbol) =  _property_map_TeamTalent[property_name]

function check_required(o::TeamTalent)
    true
end

function validate_property(::Type{ TeamTalent }, name::Symbol, val)
end
