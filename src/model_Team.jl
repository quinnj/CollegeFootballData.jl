# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Team <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    school::Any # spec type: Union{ Nothing, String } # spec name: school
    mascot::Any # spec type: Union{ Nothing, String } # spec name: mascot
    abbreviation::Any # spec type: Union{ Nothing, String } # spec name: abbreviation
    alt_name_1::Any # spec type: Union{ Nothing, String } # spec name: alt_name_1
    alt_name_2::Any # spec type: Union{ Nothing, String } # spec name: alt_name_2
    alt_name_3::Any # spec type: Union{ Nothing, String } # spec name: alt_name_3
    conference::Any # spec type: Union{ Nothing, String } # spec name: conference
    division::Any # spec type: Union{ Nothing, String } # spec name: division
    color::Any # spec type: Union{ Nothing, String } # spec name: color
    alt_color::Any # spec type: Union{ Nothing, String } # spec name: alt_color
    logos::Any # spec type: Union{ Nothing, Vector{String} } # spec name: logos

    function Team(;id=nothing, school=nothing, mascot=nothing, abbreviation=nothing, alt_name_1=nothing, alt_name_2=nothing, alt_name_3=nothing, conference=nothing, division=nothing, color=nothing, alt_color=nothing, logos=nothing)
        o = new()
        validate_property(Team, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Team, Symbol("school"), school)
        setfield!(o, Symbol("school"), school)
        validate_property(Team, Symbol("mascot"), mascot)
        setfield!(o, Symbol("mascot"), mascot)
        validate_property(Team, Symbol("abbreviation"), abbreviation)
        setfield!(o, Symbol("abbreviation"), abbreviation)
        validate_property(Team, Symbol("alt_name_1"), alt_name_1)
        setfield!(o, Symbol("alt_name_1"), alt_name_1)
        validate_property(Team, Symbol("alt_name_2"), alt_name_2)
        setfield!(o, Symbol("alt_name_2"), alt_name_2)
        validate_property(Team, Symbol("alt_name_3"), alt_name_3)
        setfield!(o, Symbol("alt_name_3"), alt_name_3)
        validate_property(Team, Symbol("conference"), conference)
        setfield!(o, Symbol("conference"), conference)
        validate_property(Team, Symbol("division"), division)
        setfield!(o, Symbol("division"), division)
        validate_property(Team, Symbol("color"), color)
        setfield!(o, Symbol("color"), color)
        validate_property(Team, Symbol("alt_color"), alt_color)
        setfield!(o, Symbol("alt_color"), alt_color)
        validate_property(Team, Symbol("logos"), logos)
        setfield!(o, Symbol("logos"), logos)
        o
    end
end # type Team

const _property_map_Team = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("school")=>Symbol("school"), Symbol("mascot")=>Symbol("mascot"), Symbol("abbreviation")=>Symbol("abbreviation"), Symbol("alt_name_1")=>Symbol("alt_name_1"), Symbol("alt_name_2")=>Symbol("alt_name_2"), Symbol("alt_name_3")=>Symbol("alt_name_3"), Symbol("conference")=>Symbol("conference"), Symbol("division")=>Symbol("division"), Symbol("color")=>Symbol("color"), Symbol("alt_color")=>Symbol("alt_color"), Symbol("logos")=>Symbol("logos"))
const _property_types_Team = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("school")=>"String", Symbol("mascot")=>"String", Symbol("abbreviation")=>"String", Symbol("alt_name_1")=>"String", Symbol("alt_name_2")=>"String", Symbol("alt_name_3")=>"String", Symbol("conference")=>"String", Symbol("division")=>"String", Symbol("color")=>"String", Symbol("alt_color")=>"String", Symbol("logos")=>"Vector{String}")
Base.propertynames(::Type{ Team }) = collect(keys(_property_map_Team))
Swagger.property_type(::Type{ Team }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Team[name]))}
Swagger.field_name(::Type{ Team }, property_name::Symbol) =  _property_map_Team[property_name]

function check_required(o::Team)
    true
end

function validate_property(::Type{ Team }, name::Symbol, val)
end
