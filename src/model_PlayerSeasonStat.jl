# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayerSeasonStat <: SwaggerModel
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    playerId::Any # spec type: Union{ Nothing, Int32 } # spec name: playerId
    player::Any # spec type: Union{ Nothing, String } # spec name: player
    team::Any # spec type: Union{ Nothing, String } # spec name: team
    conference::Any # spec type: Union{ Nothing, String } # spec name: conference
    category::Any # spec type: Union{ Nothing, String } # spec name: category
    statType::Any # spec type: Union{ Nothing, String } # spec name: statType
    stat::Any # spec type: Union{ Nothing, Float32 } # spec name: stat

    function PlayerSeasonStat(;season=nothing, playerId=nothing, player=nothing, team=nothing, conference=nothing, category=nothing, statType=nothing, stat=nothing)
        o = new()
        validate_property(PlayerSeasonStat, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(PlayerSeasonStat, Symbol("playerId"), playerId)
        setfield!(o, Symbol("playerId"), playerId)
        validate_property(PlayerSeasonStat, Symbol("player"), player)
        setfield!(o, Symbol("player"), player)
        validate_property(PlayerSeasonStat, Symbol("team"), team)
        setfield!(o, Symbol("team"), team)
        validate_property(PlayerSeasonStat, Symbol("conference"), conference)
        setfield!(o, Symbol("conference"), conference)
        validate_property(PlayerSeasonStat, Symbol("category"), category)
        setfield!(o, Symbol("category"), category)
        validate_property(PlayerSeasonStat, Symbol("statType"), statType)
        setfield!(o, Symbol("statType"), statType)
        validate_property(PlayerSeasonStat, Symbol("stat"), stat)
        setfield!(o, Symbol("stat"), stat)
        o
    end
end # type PlayerSeasonStat

const _property_map_PlayerSeasonStat = Dict{Symbol,Symbol}(Symbol("season")=>Symbol("season"), Symbol("playerId")=>Symbol("playerId"), Symbol("player")=>Symbol("player"), Symbol("team")=>Symbol("team"), Symbol("conference")=>Symbol("conference"), Symbol("category")=>Symbol("category"), Symbol("statType")=>Symbol("statType"), Symbol("stat")=>Symbol("stat"))
const _property_types_PlayerSeasonStat = Dict{Symbol,String}(Symbol("season")=>"Int32", Symbol("playerId")=>"Int32", Symbol("player")=>"String", Symbol("team")=>"String", Symbol("conference")=>"String", Symbol("category")=>"String", Symbol("statType")=>"String", Symbol("stat")=>"Float32")
Base.propertynames(::Type{ PlayerSeasonStat }) = collect(keys(_property_map_PlayerSeasonStat))
Swagger.property_type(::Type{ PlayerSeasonStat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayerSeasonStat[name]))}
Swagger.field_name(::Type{ PlayerSeasonStat }, property_name::Symbol) =  _property_map_PlayerSeasonStat[property_name]

function check_required(o::PlayerSeasonStat)
    true
end

function validate_property(::Type{ PlayerSeasonStat }, name::Symbol, val)
end
