# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct InlineResponse200 <: SwaggerModel
    first_name::Any # spec type: Union{ Nothing, String } # spec name: first_name
    last_name::Any # spec type: Union{ Nothing, String } # spec name: last_name
    seasons::Any # spec type: Union{ Nothing, Vector{TeamSeason} } # spec name: seasons

    function InlineResponse200(;first_name=nothing, last_name=nothing, seasons=nothing)
        o = new()
        validate_property(InlineResponse200, Symbol("first_name"), first_name)
        setfield!(o, Symbol("first_name"), first_name)
        validate_property(InlineResponse200, Symbol("last_name"), last_name)
        setfield!(o, Symbol("last_name"), last_name)
        validate_property(InlineResponse200, Symbol("seasons"), seasons)
        setfield!(o, Symbol("seasons"), seasons)
        o
    end
end # type InlineResponse200

const _property_map_InlineResponse200 = Dict{Symbol,Symbol}(Symbol("first_name")=>Symbol("first_name"), Symbol("last_name")=>Symbol("last_name"), Symbol("seasons")=>Symbol("seasons"))
const _property_types_InlineResponse200 = Dict{Symbol,String}(Symbol("first_name")=>"String", Symbol("last_name")=>"String", Symbol("seasons")=>"Vector{TeamSeason}")
Base.propertynames(::Type{ InlineResponse200 }) = collect(keys(_property_map_InlineResponse200))
Swagger.property_type(::Type{ InlineResponse200 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_InlineResponse200[name]))}
Swagger.field_name(::Type{ InlineResponse200 }, property_name::Symbol) =  _property_map_InlineResponse200[property_name]

function check_required(o::InlineResponse200)
    true
end

function validate_property(::Type{ InlineResponse200 }, name::Symbol, val)
end
