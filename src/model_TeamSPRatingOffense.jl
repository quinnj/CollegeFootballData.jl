# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TeamSPRatingOffense <: SwaggerModel
    rating::Any # spec type: Union{ Nothing, Float32 } # spec name: rating
    success::Any # spec type: Union{ Nothing, Float32 } # spec name: success
    explosiveness::Any # spec type: Union{ Nothing, Float32 } # spec name: explosiveness
    rushing::Any # spec type: Union{ Nothing, Float32 } # spec name: rushing
    passing::Any # spec type: Union{ Nothing, Float32 } # spec name: passing
    standardDowns::Any # spec type: Union{ Nothing, Float32 } # spec name: standardDowns
    passingDowns::Any # spec type: Union{ Nothing, Float32 } # spec name: passingDowns
    runRate::Any # spec type: Union{ Nothing, Float32 } # spec name: runRate
    pace::Any # spec type: Union{ Nothing, Float32 } # spec name: pace

    function TeamSPRatingOffense(;rating=nothing, success=nothing, explosiveness=nothing, rushing=nothing, passing=nothing, standardDowns=nothing, passingDowns=nothing, runRate=nothing, pace=nothing)
        o = new()
        validate_property(TeamSPRatingOffense, Symbol("rating"), rating)
        setfield!(o, Symbol("rating"), rating)
        validate_property(TeamSPRatingOffense, Symbol("success"), success)
        setfield!(o, Symbol("success"), success)
        validate_property(TeamSPRatingOffense, Symbol("explosiveness"), explosiveness)
        setfield!(o, Symbol("explosiveness"), explosiveness)
        validate_property(TeamSPRatingOffense, Symbol("rushing"), rushing)
        setfield!(o, Symbol("rushing"), rushing)
        validate_property(TeamSPRatingOffense, Symbol("passing"), passing)
        setfield!(o, Symbol("passing"), passing)
        validate_property(TeamSPRatingOffense, Symbol("standardDowns"), standardDowns)
        setfield!(o, Symbol("standardDowns"), standardDowns)
        validate_property(TeamSPRatingOffense, Symbol("passingDowns"), passingDowns)
        setfield!(o, Symbol("passingDowns"), passingDowns)
        validate_property(TeamSPRatingOffense, Symbol("runRate"), runRate)
        setfield!(o, Symbol("runRate"), runRate)
        validate_property(TeamSPRatingOffense, Symbol("pace"), pace)
        setfield!(o, Symbol("pace"), pace)
        o
    end
end # type TeamSPRatingOffense

const _property_map_TeamSPRatingOffense = Dict{Symbol,Symbol}(Symbol("rating")=>Symbol("rating"), Symbol("success")=>Symbol("success"), Symbol("explosiveness")=>Symbol("explosiveness"), Symbol("rushing")=>Symbol("rushing"), Symbol("passing")=>Symbol("passing"), Symbol("standardDowns")=>Symbol("standardDowns"), Symbol("passingDowns")=>Symbol("passingDowns"), Symbol("runRate")=>Symbol("runRate"), Symbol("pace")=>Symbol("pace"))
const _property_types_TeamSPRatingOffense = Dict{Symbol,String}(Symbol("rating")=>"Float32", Symbol("success")=>"Float32", Symbol("explosiveness")=>"Float32", Symbol("rushing")=>"Float32", Symbol("passing")=>"Float32", Symbol("standardDowns")=>"Float32", Symbol("passingDowns")=>"Float32", Symbol("runRate")=>"Float32", Symbol("pace")=>"Float32")
Base.propertynames(::Type{ TeamSPRatingOffense }) = collect(keys(_property_map_TeamSPRatingOffense))
Swagger.property_type(::Type{ TeamSPRatingOffense }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TeamSPRatingOffense[name]))}
Swagger.field_name(::Type{ TeamSPRatingOffense }, property_name::Symbol) =  _property_map_TeamSPRatingOffense[property_name]

function check_required(o::TeamSPRatingOffense)
    true
end

function validate_property(::Type{ TeamSPRatingOffense }, name::Symbol, val)
end
