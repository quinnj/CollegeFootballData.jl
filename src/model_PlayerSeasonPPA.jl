# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayerSeasonPPA <: SwaggerModel
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    position::Any # spec type: Union{ Nothing, String } # spec name: position
    team::Any # spec type: Union{ Nothing, String } # spec name: team
    conference::Any # spec type: Union{ Nothing, String } # spec name: conference
    averagePPA::Any # spec type: Union{ Nothing, PlayerSeasonPPAAveragePPA } # spec name: averagePPA
    totalPPA::Any # spec type: Union{ Nothing, PlayerSeasonPPAAveragePPA } # spec name: totalPPA

    function PlayerSeasonPPA(;season=nothing, id=nothing, name=nothing, position=nothing, team=nothing, conference=nothing, averagePPA=nothing, totalPPA=nothing)
        o = new()
        validate_property(PlayerSeasonPPA, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(PlayerSeasonPPA, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(PlayerSeasonPPA, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(PlayerSeasonPPA, Symbol("position"), position)
        setfield!(o, Symbol("position"), position)
        validate_property(PlayerSeasonPPA, Symbol("team"), team)
        setfield!(o, Symbol("team"), team)
        validate_property(PlayerSeasonPPA, Symbol("conference"), conference)
        setfield!(o, Symbol("conference"), conference)
        validate_property(PlayerSeasonPPA, Symbol("averagePPA"), averagePPA)
        setfield!(o, Symbol("averagePPA"), averagePPA)
        validate_property(PlayerSeasonPPA, Symbol("totalPPA"), totalPPA)
        setfield!(o, Symbol("totalPPA"), totalPPA)
        o
    end
end # type PlayerSeasonPPA

const _property_map_PlayerSeasonPPA = Dict{Symbol,Symbol}(Symbol("season")=>Symbol("season"), Symbol("id")=>Symbol("id"), Symbol("name")=>Symbol("name"), Symbol("position")=>Symbol("position"), Symbol("team")=>Symbol("team"), Symbol("conference")=>Symbol("conference"), Symbol("averagePPA")=>Symbol("averagePPA"), Symbol("totalPPA")=>Symbol("totalPPA"))
const _property_types_PlayerSeasonPPA = Dict{Symbol,String}(Symbol("season")=>"Int32", Symbol("id")=>"Int32", Symbol("name")=>"String", Symbol("position")=>"String", Symbol("team")=>"String", Symbol("conference")=>"String", Symbol("averagePPA")=>"PlayerSeasonPPAAveragePPA", Symbol("totalPPA")=>"PlayerSeasonPPAAveragePPA")
Base.propertynames(::Type{ PlayerSeasonPPA }) = collect(keys(_property_map_PlayerSeasonPPA))
Swagger.property_type(::Type{ PlayerSeasonPPA }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayerSeasonPPA[name]))}
Swagger.field_name(::Type{ PlayerSeasonPPA }, property_name::Symbol) =  _property_map_PlayerSeasonPPA[property_name]

function check_required(o::PlayerSeasonPPA)
    true
end

function validate_property(::Type{ PlayerSeasonPPA }, name::Symbol, val)
end
