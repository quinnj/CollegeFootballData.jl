# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct GameMedia <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    week::Any # spec type: Union{ Nothing, Int32 } # spec name: week
    seasonType::Any # spec type: Union{ Nothing, String } # spec name: seasonType
    startTime::Any # spec type: Union{ Nothing, String } # spec name: startTime
    isStartTimeTBD::Any # spec type: Union{ Nothing, Bool } # spec name: isStartTimeTBD
    homeTeam::Any # spec type: Union{ Nothing, String } # spec name: homeTeam
    homeConference::Any # spec type: Union{ Nothing, String } # spec name: homeConference
    awayTeam::Any # spec type: Union{ Nothing, String } # spec name: awayTeam
    awayConference::Any # spec type: Union{ Nothing, String } # spec name: awayConference
    mediaType::Any # spec type: Union{ Nothing, String } # spec name: mediaType
    outlet::Any # spec type: Union{ Nothing, String } # spec name: outlet

    function GameMedia(;id=nothing, season=nothing, week=nothing, seasonType=nothing, startTime=nothing, isStartTimeTBD=nothing, homeTeam=nothing, homeConference=nothing, awayTeam=nothing, awayConference=nothing, mediaType=nothing, outlet=nothing)
        o = new()
        validate_property(GameMedia, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(GameMedia, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(GameMedia, Symbol("week"), week)
        setfield!(o, Symbol("week"), week)
        validate_property(GameMedia, Symbol("seasonType"), seasonType)
        setfield!(o, Symbol("seasonType"), seasonType)
        validate_property(GameMedia, Symbol("startTime"), startTime)
        setfield!(o, Symbol("startTime"), startTime)
        validate_property(GameMedia, Symbol("isStartTimeTBD"), isStartTimeTBD)
        setfield!(o, Symbol("isStartTimeTBD"), isStartTimeTBD)
        validate_property(GameMedia, Symbol("homeTeam"), homeTeam)
        setfield!(o, Symbol("homeTeam"), homeTeam)
        validate_property(GameMedia, Symbol("homeConference"), homeConference)
        setfield!(o, Symbol("homeConference"), homeConference)
        validate_property(GameMedia, Symbol("awayTeam"), awayTeam)
        setfield!(o, Symbol("awayTeam"), awayTeam)
        validate_property(GameMedia, Symbol("awayConference"), awayConference)
        setfield!(o, Symbol("awayConference"), awayConference)
        validate_property(GameMedia, Symbol("mediaType"), mediaType)
        setfield!(o, Symbol("mediaType"), mediaType)
        validate_property(GameMedia, Symbol("outlet"), outlet)
        setfield!(o, Symbol("outlet"), outlet)
        o
    end
end # type GameMedia

const _property_map_GameMedia = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("season")=>Symbol("season"), Symbol("week")=>Symbol("week"), Symbol("seasonType")=>Symbol("seasonType"), Symbol("startTime")=>Symbol("startTime"), Symbol("isStartTimeTBD")=>Symbol("isStartTimeTBD"), Symbol("homeTeam")=>Symbol("homeTeam"), Symbol("homeConference")=>Symbol("homeConference"), Symbol("awayTeam")=>Symbol("awayTeam"), Symbol("awayConference")=>Symbol("awayConference"), Symbol("mediaType")=>Symbol("mediaType"), Symbol("outlet")=>Symbol("outlet"))
const _property_types_GameMedia = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("season")=>"Int32", Symbol("week")=>"Int32", Symbol("seasonType")=>"String", Symbol("startTime")=>"String", Symbol("isStartTimeTBD")=>"Bool", Symbol("homeTeam")=>"String", Symbol("homeConference")=>"String", Symbol("awayTeam")=>"String", Symbol("awayConference")=>"String", Symbol("mediaType")=>"String", Symbol("outlet")=>"String")
Base.propertynames(::Type{ GameMedia }) = collect(keys(_property_map_GameMedia))
Swagger.property_type(::Type{ GameMedia }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GameMedia[name]))}
Swagger.field_name(::Type{ GameMedia }, property_name::Symbol) =  _property_map_GameMedia[property_name]

function check_required(o::GameMedia)
    true
end

function validate_property(::Type{ GameMedia }, name::Symbol, val)
end
