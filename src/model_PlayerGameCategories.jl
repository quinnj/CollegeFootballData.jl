# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayerGameCategories <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    types::Any # spec type: Union{ Nothing, Vector{PlayerGameTypes} } # spec name: types

    function PlayerGameCategories(;name=nothing, types=nothing)
        o = new()
        validate_property(PlayerGameCategories, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(PlayerGameCategories, Symbol("types"), types)
        setfield!(o, Symbol("types"), types)
        o
    end
end # type PlayerGameCategories

const _property_map_PlayerGameCategories = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("types")=>Symbol("types"))
const _property_types_PlayerGameCategories = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("types")=>"Vector{PlayerGameTypes}")
Base.propertynames(::Type{ PlayerGameCategories }) = collect(keys(_property_map_PlayerGameCategories))
Swagger.property_type(::Type{ PlayerGameCategories }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayerGameCategories[name]))}
Swagger.field_name(::Type{ PlayerGameCategories }, property_name::Symbol) =  _property_map_PlayerGameCategories[property_name]

function check_required(o::PlayerGameCategories)
    true
end

function validate_property(::Type{ PlayerGameCategories }, name::Symbol, val)
end
