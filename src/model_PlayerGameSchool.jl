# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayerGameSchool <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    conference::Any # spec type: Union{ Nothing, String } # spec name: conference

    function PlayerGameSchool(;name=nothing, conference=nothing)
        o = new()
        validate_property(PlayerGameSchool, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(PlayerGameSchool, Symbol("conference"), conference)
        setfield!(o, Symbol("conference"), conference)
        o
    end
end # type PlayerGameSchool

const _property_map_PlayerGameSchool = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("conference")=>Symbol("conference"))
const _property_types_PlayerGameSchool = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("conference")=>"String")
Base.propertynames(::Type{ PlayerGameSchool }) = collect(keys(_property_map_PlayerGameSchool))
Swagger.property_type(::Type{ PlayerGameSchool }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayerGameSchool[name]))}
Swagger.field_name(::Type{ PlayerGameSchool }, property_name::Symbol) =  _property_map_PlayerGameSchool[property_name]

function check_required(o::PlayerGameSchool)
    true
end

function validate_property(::Type{ PlayerGameSchool }, name::Symbol, val)
end
