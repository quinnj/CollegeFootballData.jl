# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PlayerSearchResult <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    team::Any # spec type: Union{ Nothing, String } # spec name: team
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    firstName::Any # spec type: Union{ Nothing, String } # spec name: firstName
    lastName::Any # spec type: Union{ Nothing, String } # spec name: lastName
    weight::Any # spec type: Union{ Nothing, Int32 } # spec name: weight
    height::Any # spec type: Union{ Nothing, Int32 } # spec name: height
    jersey::Any # spec type: Union{ Nothing, Int32 } # spec name: jersey
    position::Any # spec type: Union{ Nothing, String } # spec name: position
    hometown::Any # spec type: Union{ Nothing, String } # spec name: hometown
    teamColor::Any # spec type: Union{ Nothing, String } # spec name: teamColor
    teamColorSecondary::Any # spec type: Union{ Nothing, String } # spec name: teamColorSecondary

    function PlayerSearchResult(;id=nothing, team=nothing, name=nothing, firstName=nothing, lastName=nothing, weight=nothing, height=nothing, jersey=nothing, position=nothing, hometown=nothing, teamColor=nothing, teamColorSecondary=nothing)
        o = new()
        validate_property(PlayerSearchResult, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(PlayerSearchResult, Symbol("team"), team)
        setfield!(o, Symbol("team"), team)
        validate_property(PlayerSearchResult, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(PlayerSearchResult, Symbol("firstName"), firstName)
        setfield!(o, Symbol("firstName"), firstName)
        validate_property(PlayerSearchResult, Symbol("lastName"), lastName)
        setfield!(o, Symbol("lastName"), lastName)
        validate_property(PlayerSearchResult, Symbol("weight"), weight)
        setfield!(o, Symbol("weight"), weight)
        validate_property(PlayerSearchResult, Symbol("height"), height)
        setfield!(o, Symbol("height"), height)
        validate_property(PlayerSearchResult, Symbol("jersey"), jersey)
        setfield!(o, Symbol("jersey"), jersey)
        validate_property(PlayerSearchResult, Symbol("position"), position)
        setfield!(o, Symbol("position"), position)
        validate_property(PlayerSearchResult, Symbol("hometown"), hometown)
        setfield!(o, Symbol("hometown"), hometown)
        validate_property(PlayerSearchResult, Symbol("teamColor"), teamColor)
        setfield!(o, Symbol("teamColor"), teamColor)
        validate_property(PlayerSearchResult, Symbol("teamColorSecondary"), teamColorSecondary)
        setfield!(o, Symbol("teamColorSecondary"), teamColorSecondary)
        o
    end
end # type PlayerSearchResult

const _property_map_PlayerSearchResult = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("team")=>Symbol("team"), Symbol("name")=>Symbol("name"), Symbol("firstName")=>Symbol("firstName"), Symbol("lastName")=>Symbol("lastName"), Symbol("weight")=>Symbol("weight"), Symbol("height")=>Symbol("height"), Symbol("jersey")=>Symbol("jersey"), Symbol("position")=>Symbol("position"), Symbol("hometown")=>Symbol("hometown"), Symbol("teamColor")=>Symbol("teamColor"), Symbol("teamColorSecondary")=>Symbol("teamColorSecondary"))
const _property_types_PlayerSearchResult = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("team")=>"String", Symbol("name")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("weight")=>"Int32", Symbol("height")=>"Int32", Symbol("jersey")=>"Int32", Symbol("position")=>"String", Symbol("hometown")=>"String", Symbol("teamColor")=>"String", Symbol("teamColorSecondary")=>"String")
Base.propertynames(::Type{ PlayerSearchResult }) = collect(keys(_property_map_PlayerSearchResult))
Swagger.property_type(::Type{ PlayerSearchResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlayerSearchResult[name]))}
Swagger.field_name(::Type{ PlayerSearchResult }, property_name::Symbol) =  _property_map_PlayerSearchResult[property_name]

function check_required(o::PlayerSearchResult)
    true
end

function validate_property(::Type{ PlayerSearchResult }, name::Symbol, val)
end
