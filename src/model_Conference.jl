# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Conference <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    short_name::Any # spec type: Union{ Nothing, String } # spec name: short_name
    abbreviation::Any # spec type: Union{ Nothing, String } # spec name: abbreviation

    function Conference(;id=nothing, name=nothing, short_name=nothing, abbreviation=nothing)
        o = new()
        validate_property(Conference, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Conference, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(Conference, Symbol("short_name"), short_name)
        setfield!(o, Symbol("short_name"), short_name)
        validate_property(Conference, Symbol("abbreviation"), abbreviation)
        setfield!(o, Symbol("abbreviation"), abbreviation)
        o
    end
end # type Conference

const _property_map_Conference = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("name")=>Symbol("name"), Symbol("short_name")=>Symbol("short_name"), Symbol("abbreviation")=>Symbol("abbreviation"))
const _property_types_Conference = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("name")=>"String", Symbol("short_name")=>"String", Symbol("abbreviation")=>"String")
Base.propertynames(::Type{ Conference }) = collect(keys(_property_map_Conference))
Swagger.property_type(::Type{ Conference }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Conference[name]))}
Swagger.field_name(::Type{ Conference }, property_name::Symbol) =  _property_map_Conference[property_name]

function check_required(o::Conference)
    true
end

function validate_property(::Type{ Conference }, name::Symbol, val)
end
