# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Game <: SwaggerModel
    id::Any # spec type: Union{ Nothing, Int32 } # spec name: id
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    week::Any # spec type: Union{ Nothing, Int32 } # spec name: week
    season_type::Any # spec type: Union{ Nothing, String } # spec name: season_type
    start_date::Any # spec type: Union{ Nothing, String } # spec name: start_date
    start_time_tbd::Any # spec type: Union{ Nothing, Bool } # spec name: start_time_tbd
    neutral_site::Any # spec type: Union{ Nothing, Bool } # spec name: neutral_site
    conference_game::Any # spec type: Union{ Nothing, Bool } # spec name: conference_game
    attendance::Any # spec type: Union{ Nothing, Int32 } # spec name: attendance
    venue_id::Any # spec type: Union{ Nothing, Int32 } # spec name: venue_id
    venue::Any # spec type: Union{ Nothing, String } # spec name: venue
    home_id::Any # spec type: Union{ Nothing, Int32 } # spec name: home_id
    home_team::Any # spec type: Union{ Nothing, String } # spec name: home_team
    home_conference::Any # spec type: Union{ Nothing, String } # spec name: home_conference
    home_points::Any # spec type: Union{ Nothing, Int32 } # spec name: home_points
    home_line_scores::Any # spec type: Union{ Nothing, Vector{Int32} } # spec name: home_line_scores
    home_post_win_prob::Any # spec type: Union{ Nothing, Float32 } # spec name: home_post_win_prob
    away_id::Any # spec type: Union{ Nothing, Int32 } # spec name: away_id
    away_team::Any # spec type: Union{ Nothing, String } # spec name: away_team
    away_conference::Any # spec type: Union{ Nothing, String } # spec name: away_conference
    away_points::Any # spec type: Union{ Nothing, Int32 } # spec name: away_points
    away_line_scores::Any # spec type: Union{ Nothing, Vector{Int32} } # spec name: away_line_scores
    away_post_win_prob::Any # spec type: Union{ Nothing, Float32 } # spec name: away_post_win_prob
    excitement_index::Any # spec type: Union{ Nothing, Float32 } # spec name: excitement_index

    function Game(;id=nothing, season=nothing, week=nothing, season_type=nothing, start_date=nothing, start_time_tbd=nothing, neutral_site=nothing, conference_game=nothing, attendance=nothing, venue_id=nothing, venue=nothing, home_id=nothing, home_team=nothing, home_conference=nothing, home_points=nothing, home_line_scores=nothing, home_post_win_prob=nothing, away_id=nothing, away_team=nothing, away_conference=nothing, away_points=nothing, away_line_scores=nothing, away_post_win_prob=nothing, excitement_index=nothing)
        o = new()
        validate_property(Game, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Game, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(Game, Symbol("week"), week)
        setfield!(o, Symbol("week"), week)
        validate_property(Game, Symbol("season_type"), season_type)
        setfield!(o, Symbol("season_type"), season_type)
        validate_property(Game, Symbol("start_date"), start_date)
        setfield!(o, Symbol("start_date"), start_date)
        validate_property(Game, Symbol("start_time_tbd"), start_time_tbd)
        setfield!(o, Symbol("start_time_tbd"), start_time_tbd)
        validate_property(Game, Symbol("neutral_site"), neutral_site)
        setfield!(o, Symbol("neutral_site"), neutral_site)
        validate_property(Game, Symbol("conference_game"), conference_game)
        setfield!(o, Symbol("conference_game"), conference_game)
        validate_property(Game, Symbol("attendance"), attendance)
        setfield!(o, Symbol("attendance"), attendance)
        validate_property(Game, Symbol("venue_id"), venue_id)
        setfield!(o, Symbol("venue_id"), venue_id)
        validate_property(Game, Symbol("venue"), venue)
        setfield!(o, Symbol("venue"), venue)
        validate_property(Game, Symbol("home_id"), home_id)
        setfield!(o, Symbol("home_id"), home_id)
        validate_property(Game, Symbol("home_team"), home_team)
        setfield!(o, Symbol("home_team"), home_team)
        validate_property(Game, Symbol("home_conference"), home_conference)
        setfield!(o, Symbol("home_conference"), home_conference)
        validate_property(Game, Symbol("home_points"), home_points)
        setfield!(o, Symbol("home_points"), home_points)
        validate_property(Game, Symbol("home_line_scores"), home_line_scores)
        setfield!(o, Symbol("home_line_scores"), home_line_scores)
        validate_property(Game, Symbol("home_post_win_prob"), home_post_win_prob)
        setfield!(o, Symbol("home_post_win_prob"), home_post_win_prob)
        validate_property(Game, Symbol("away_id"), away_id)
        setfield!(o, Symbol("away_id"), away_id)
        validate_property(Game, Symbol("away_team"), away_team)
        setfield!(o, Symbol("away_team"), away_team)
        validate_property(Game, Symbol("away_conference"), away_conference)
        setfield!(o, Symbol("away_conference"), away_conference)
        validate_property(Game, Symbol("away_points"), away_points)
        setfield!(o, Symbol("away_points"), away_points)
        validate_property(Game, Symbol("away_line_scores"), away_line_scores)
        setfield!(o, Symbol("away_line_scores"), away_line_scores)
        validate_property(Game, Symbol("away_post_win_prob"), away_post_win_prob)
        setfield!(o, Symbol("away_post_win_prob"), away_post_win_prob)
        validate_property(Game, Symbol("excitement_index"), excitement_index)
        setfield!(o, Symbol("excitement_index"), excitement_index)
        o
    end
end # type Game

const _property_map_Game = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("season")=>Symbol("season"), Symbol("week")=>Symbol("week"), Symbol("season_type")=>Symbol("season_type"), Symbol("start_date")=>Symbol("start_date"), Symbol("start_time_tbd")=>Symbol("start_time_tbd"), Symbol("neutral_site")=>Symbol("neutral_site"), Symbol("conference_game")=>Symbol("conference_game"), Symbol("attendance")=>Symbol("attendance"), Symbol("venue_id")=>Symbol("venue_id"), Symbol("venue")=>Symbol("venue"), Symbol("home_id")=>Symbol("home_id"), Symbol("home_team")=>Symbol("home_team"), Symbol("home_conference")=>Symbol("home_conference"), Symbol("home_points")=>Symbol("home_points"), Symbol("home_line_scores")=>Symbol("home_line_scores"), Symbol("home_post_win_prob")=>Symbol("home_post_win_prob"), Symbol("away_id")=>Symbol("away_id"), Symbol("away_team")=>Symbol("away_team"), Symbol("away_conference")=>Symbol("away_conference"), Symbol("away_points")=>Symbol("away_points"), Symbol("away_line_scores")=>Symbol("away_line_scores"), Symbol("away_post_win_prob")=>Symbol("away_post_win_prob"), Symbol("excitement_index")=>Symbol("excitement_index"))
const _property_types_Game = Dict{Symbol,String}(Symbol("id")=>"Int32", Symbol("season")=>"Int32", Symbol("week")=>"Int32", Symbol("season_type")=>"String", Symbol("start_date")=>"String", Symbol("start_time_tbd")=>"Bool", Symbol("neutral_site")=>"Bool", Symbol("conference_game")=>"Bool", Symbol("attendance")=>"Int32", Symbol("venue_id")=>"Int32", Symbol("venue")=>"String", Symbol("home_id")=>"Int32", Symbol("home_team")=>"String", Symbol("home_conference")=>"String", Symbol("home_points")=>"Int32", Symbol("home_line_scores")=>"Vector{Int32}", Symbol("home_post_win_prob")=>"Float32", Symbol("away_id")=>"Int32", Symbol("away_team")=>"String", Symbol("away_conference")=>"String", Symbol("away_points")=>"Int32", Symbol("away_line_scores")=>"Vector{Int32}", Symbol("away_post_win_prob")=>"Float32", Symbol("excitement_index")=>"Float32")
Base.propertynames(::Type{ Game }) = collect(keys(_property_map_Game))
Swagger.property_type(::Type{ Game }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Game[name]))}
Swagger.field_name(::Type{ Game }, property_name::Symbol) =  _property_map_Game[property_name]

function check_required(o::Game)
    true
end

function validate_property(::Type{ Game }, name::Symbol, val)
end
