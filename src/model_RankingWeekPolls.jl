# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct RankingWeekPolls <: SwaggerModel
    poll::Any # spec type: Union{ Nothing, String } # spec name: poll
    ranks::Any # spec type: Union{ Nothing, Vector{RankingWeekRanks} } # spec name: ranks

    function RankingWeekPolls(;poll=nothing, ranks=nothing)
        o = new()
        validate_property(RankingWeekPolls, Symbol("poll"), poll)
        setfield!(o, Symbol("poll"), poll)
        validate_property(RankingWeekPolls, Symbol("ranks"), ranks)
        setfield!(o, Symbol("ranks"), ranks)
        o
    end
end # type RankingWeekPolls

const _property_map_RankingWeekPolls = Dict{Symbol,Symbol}(Symbol("poll")=>Symbol("poll"), Symbol("ranks")=>Symbol("ranks"))
const _property_types_RankingWeekPolls = Dict{Symbol,String}(Symbol("poll")=>"String", Symbol("ranks")=>"Vector{RankingWeekRanks}")
Base.propertynames(::Type{ RankingWeekPolls }) = collect(keys(_property_map_RankingWeekPolls))
Swagger.property_type(::Type{ RankingWeekPolls }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RankingWeekPolls[name]))}
Swagger.field_name(::Type{ RankingWeekPolls }, property_name::Symbol) =  _property_map_RankingWeekPolls[property_name]

function check_required(o::RankingWeekPolls)
    true
end

function validate_property(::Type{ RankingWeekPolls }, name::Symbol, val)
end
