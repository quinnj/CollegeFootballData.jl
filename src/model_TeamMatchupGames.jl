# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TeamMatchupGames <: SwaggerModel
    season::Any # spec type: Union{ Nothing, Int32 } # spec name: season
    week::Any # spec type: Union{ Nothing, Int32 } # spec name: week
    season_type::Any # spec type: Union{ Nothing, String } # spec name: season_type
    date::Any # spec type: Union{ Nothing, String } # spec name: date
    neutralSite::Any # spec type: Union{ Nothing, Bool } # spec name: neutralSite
    venue::Any # spec type: Union{ Nothing, String } # spec name: venue
    homeTeam::Any # spec type: Union{ Nothing, String } # spec name: homeTeam
    homeScore::Any # spec type: Union{ Nothing, Int32 } # spec name: homeScore
    awayTeam::Any # spec type: Union{ Nothing, String } # spec name: awayTeam
    awayScore::Any # spec type: Union{ Nothing, Int32 } # spec name: awayScore
    winner::Any # spec type: Union{ Nothing, String } # spec name: winner

    function TeamMatchupGames(;season=nothing, week=nothing, season_type=nothing, date=nothing, neutralSite=nothing, venue=nothing, homeTeam=nothing, homeScore=nothing, awayTeam=nothing, awayScore=nothing, winner=nothing)
        o = new()
        validate_property(TeamMatchupGames, Symbol("season"), season)
        setfield!(o, Symbol("season"), season)
        validate_property(TeamMatchupGames, Symbol("week"), week)
        setfield!(o, Symbol("week"), week)
        validate_property(TeamMatchupGames, Symbol("season_type"), season_type)
        setfield!(o, Symbol("season_type"), season_type)
        validate_property(TeamMatchupGames, Symbol("date"), date)
        setfield!(o, Symbol("date"), date)
        validate_property(TeamMatchupGames, Symbol("neutralSite"), neutralSite)
        setfield!(o, Symbol("neutralSite"), neutralSite)
        validate_property(TeamMatchupGames, Symbol("venue"), venue)
        setfield!(o, Symbol("venue"), venue)
        validate_property(TeamMatchupGames, Symbol("homeTeam"), homeTeam)
        setfield!(o, Symbol("homeTeam"), homeTeam)
        validate_property(TeamMatchupGames, Symbol("homeScore"), homeScore)
        setfield!(o, Symbol("homeScore"), homeScore)
        validate_property(TeamMatchupGames, Symbol("awayTeam"), awayTeam)
        setfield!(o, Symbol("awayTeam"), awayTeam)
        validate_property(TeamMatchupGames, Symbol("awayScore"), awayScore)
        setfield!(o, Symbol("awayScore"), awayScore)
        validate_property(TeamMatchupGames, Symbol("winner"), winner)
        setfield!(o, Symbol("winner"), winner)
        o
    end
end # type TeamMatchupGames

const _property_map_TeamMatchupGames = Dict{Symbol,Symbol}(Symbol("season")=>Symbol("season"), Symbol("week")=>Symbol("week"), Symbol("season_type")=>Symbol("season_type"), Symbol("date")=>Symbol("date"), Symbol("neutralSite")=>Symbol("neutralSite"), Symbol("venue")=>Symbol("venue"), Symbol("homeTeam")=>Symbol("homeTeam"), Symbol("homeScore")=>Symbol("homeScore"), Symbol("awayTeam")=>Symbol("awayTeam"), Symbol("awayScore")=>Symbol("awayScore"), Symbol("winner")=>Symbol("winner"))
const _property_types_TeamMatchupGames = Dict{Symbol,String}(Symbol("season")=>"Int32", Symbol("week")=>"Int32", Symbol("season_type")=>"String", Symbol("date")=>"String", Symbol("neutralSite")=>"Bool", Symbol("venue")=>"String", Symbol("homeTeam")=>"String", Symbol("homeScore")=>"Int32", Symbol("awayTeam")=>"String", Symbol("awayScore")=>"Int32", Symbol("winner")=>"String")
Base.propertynames(::Type{ TeamMatchupGames }) = collect(keys(_property_map_TeamMatchupGames))
Swagger.property_type(::Type{ TeamMatchupGames }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TeamMatchupGames[name]))}
Swagger.field_name(::Type{ TeamMatchupGames }, property_name::Symbol) =  _property_map_TeamMatchupGames[property_name]

function check_required(o::TeamMatchupGames)
    true
end

function validate_property(::Type{ TeamMatchupGames }, name::Symbol, val)
end
