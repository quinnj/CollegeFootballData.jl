# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct TeamRecord <: SwaggerModel
    year::Any # spec type: Union{ Nothing, Int32 } # spec name: year
    team::Any # spec type: Union{ Nothing, String } # spec name: team
    conference::Any # spec type: Union{ Nothing, String } # spec name: conference
    division::Any # spec type: Union{ Nothing, String } # spec name: division
    total::Any # spec type: Union{ Nothing, TeamRecordTotal } # spec name: total
    conferenceGames::Any # spec type: Union{ Nothing, TeamRecordTotal } # spec name: conferenceGames
    homeGames::Any # spec type: Union{ Nothing, TeamRecordTotal } # spec name: homeGames
    awayGames::Any # spec type: Union{ Nothing, TeamRecordTotal } # spec name: awayGames

    function TeamRecord(;year=nothing, team=nothing, conference=nothing, division=nothing, total=nothing, conferenceGames=nothing, homeGames=nothing, awayGames=nothing)
        o = new()
        validate_property(TeamRecord, Symbol("year"), year)
        setfield!(o, Symbol("year"), year)
        validate_property(TeamRecord, Symbol("team"), team)
        setfield!(o, Symbol("team"), team)
        validate_property(TeamRecord, Symbol("conference"), conference)
        setfield!(o, Symbol("conference"), conference)
        validate_property(TeamRecord, Symbol("division"), division)
        setfield!(o, Symbol("division"), division)
        validate_property(TeamRecord, Symbol("total"), total)
        setfield!(o, Symbol("total"), total)
        validate_property(TeamRecord, Symbol("conferenceGames"), conferenceGames)
        setfield!(o, Symbol("conferenceGames"), conferenceGames)
        validate_property(TeamRecord, Symbol("homeGames"), homeGames)
        setfield!(o, Symbol("homeGames"), homeGames)
        validate_property(TeamRecord, Symbol("awayGames"), awayGames)
        setfield!(o, Symbol("awayGames"), awayGames)
        o
    end
end # type TeamRecord

const _property_map_TeamRecord = Dict{Symbol,Symbol}(Symbol("year")=>Symbol("year"), Symbol("team")=>Symbol("team"), Symbol("conference")=>Symbol("conference"), Symbol("division")=>Symbol("division"), Symbol("total")=>Symbol("total"), Symbol("conferenceGames")=>Symbol("conferenceGames"), Symbol("homeGames")=>Symbol("homeGames"), Symbol("awayGames")=>Symbol("awayGames"))
const _property_types_TeamRecord = Dict{Symbol,String}(Symbol("year")=>"Int32", Symbol("team")=>"String", Symbol("conference")=>"String", Symbol("division")=>"String", Symbol("total")=>"TeamRecordTotal", Symbol("conferenceGames")=>"TeamRecordTotal", Symbol("homeGames")=>"TeamRecordTotal", Symbol("awayGames")=>"TeamRecordTotal")
Base.propertynames(::Type{ TeamRecord }) = collect(keys(_property_map_TeamRecord))
Swagger.property_type(::Type{ TeamRecord }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TeamRecord[name]))}
Swagger.field_name(::Type{ TeamRecord }, property_name::Symbol) =  _property_map_TeamRecord[property_name]

function check_required(o::TeamRecord)
    true
end

function validate_property(::Type{ TeamRecord }, name::Symbol, val)
end
